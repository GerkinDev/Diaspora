import { ConstrainedTypes } from './constrainedTypes';

/**
 * All properties are optional
 */
export interface QueryOptionsRaw {
	/**
	 * Number of items to skip
	 */
	skip?: ConstrainedTypes.AbsInt0;

	/**
	 * Number of items to get
	 */
	limit?: ConstrainedTypes.AbsIntInf0;

	/**
	 * To use with {@link QueryOptions.limit `limit`} and without {@link QueryOptions.skip `skip`}. Skips `page` pages of `limit` elements
	 */
	page?: ConstrainedTypes.AbsInt0;

	/**
	 * Flag indicating if adapter input should be remapped or not. TODO Remapping doc
	 */
	remapInput?: boolean;

	/**
	 * Flag indicating if adapter output should be remapped or not. TODO Remapping doc
	 */
	remapOutput?: boolean;
}

/**
 * Generated by Diaspora
 */
export interface QueryOptions {
	/**
	 * Number of items to skip
	 */
	skip: ConstrainedTypes.AbsInt0;

	/**
	 * Number of items to get
	 */
	limit: ConstrainedTypes.AbsIntInf0;

	/**
	 * To use with {@link QueryOptions.limit `limit`} and without {@link QueryOptions.skip `skip`}. Skips `page` pages of `limit` elements
	 */
	page: ConstrainedTypes.AbsInt0;

	/**
	 * Flag indicating if adapter input should be remapped or not. TODO Remapping doc
	 */
	remapInput: boolean;

	/**
	 * Flag indicating if adapter output should be remapped or not. TODO Remapping doc
	 */
	remapOutput: boolean;
}

/**
 * By default, all conditions in a single SelectQueryCondition are combined with an `AND` operator.
 */
export interface SelectQueryCondition {
	/**
	 * Match if item value is equal to this. Objects and array are compared deeply. **Alias: `==`**
	 */
	$equals: any;

	/**
	 * Match if item value is different to this. Objects and array are compared deeply. **Alias: `!=`**
	 */
	$diff: any;

	/**
	 * If `true`, match items where this prop is defined. If `false`, match when prop is null or not set. **Alias: `~`**
	 */
	$exists: boolean;

	/**
	 * Match if item value is less than this. **Alias: `<`**
	 */
	$less: number;

	/**
	 * Match if item value is less than this or equals to this. **Alias: `<=`**
	 */
	$lessEqual: number;

	/**
	 * Match if item value is greater than this. **Alias: `>`**
	 */
	$greater: number;

	/**
	 * Match if item value is greater than this or equals to this. **Alias: `>=`**
	 */
	$greaterEqual: number;

	/**
	 * Match if *one of* the conditions in the array is true. **Alias: `||`** **NOT IMPLEMENTED YET**
	 */
	$or: SelectQueryOrCondition[];

	/**
	 * Match if *all* the conditions in the array are true. Optional, because several conditions in a single SelectQueryCondition are combined with an `AND` operator. **Alias: `&&`** **NOT IMPLEMENTED YET**
	 */
	$and: SelectQueryOrCondition[];

	/**
	 * Match if *a single* of the conditions in the array is true. **Alias: `^^`** **NOT IMPLEMENTED YET**
	 */
	$xor: SelectQueryOrCondition[];

	/**
	 * Invert the condition **Alias: `!`** **NOT IMPLEMENTED YET**
	 */
	$not: SelectQueryOrCondition;

	/**
	 * On *array*, it will check if item contains the query. On *string*, it will check if query is included in item using GLOB. **NOT IMPLEMENTED YET**
	 */
	$contains: SelectQueryOrCondition | string | any;

	/**
	 * Check if item value is contained (using deep comparaison) in query. **NOT IMPLEMENTED YET**
	 */
	$in: any[];
}

export interface SelectQuery {
	/**
	 * Fields to search. If not providing an object, find items with a property value that equals this value
	 */
	[key: string]: any | SelectQueryCondition;
}

export type SelectQueryOrCondition = SelectQuery | SelectQueryCondition;
