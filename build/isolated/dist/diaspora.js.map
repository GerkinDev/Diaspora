{"version":3,"sources":["../src/diaspora.js"],"names":["f","exports","module","define","amd","g","window","global","self","Diaspora","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","_","Promise","SequentialEvent","DiasporaAdapter","classEntity","state","remaps","remapsInverted","filters","error","undefined","on","err","tableName","invert","resolve","reject","query","keysMap","isNil","mapKeys","value","key","hasOwnProperty","filtered","mapValues","input","remaped","output","entity","propName","idHash","assign","name","matchResult","every","toPairs","desc","isObject","entityVal","val","operation","isUndefined","update","forEach","opts","cloneDeep","limitOpt","limit","isString","parseInt","isInteger","Infinity","TypeError","skipOpt","skip","isFinite","ReferenceError","pageOpt","page","defaults","remapInput","remapOutput","originalQuery","options","canonicalOperations","normalizedQuery","attrSearch","Object","$equal","$exists","canon","alias","isNumber","JSON","stringify","table","insertMany","then","first","entities","mapSeries","insertOne","queryFind","findMany","foundEntities","normalizeOptions","foundCount","origSkip","loopFind","found","push","findOne","updateMany","updateOne","deleteMany","count","deleteOne","BrowserStorageEntity","BrowserStorageDiasporaAdapter","config","session","source","sessionStorage","localStorage","ensureCollectionExists","d","Date","getTime","performance","now","uuid","replace","Math","random","floor","c","toString","index","getItem","setItem","parse","id","generateUUID","setIdHash","tableIndex","getItemName","map","item","findOneById","isEqual","keys","items","returnedItem","matched","each","itemId","matchEntity","applyUpdateEntity","pull","entityToDelete","removeItem","pullAll","entitiesToDelete","set","slice","InMemoryEntity","InMemoryDiasporaAdapter","store","storeTable","matches","filter","partial","reducedMatches","constructor","applyOptionsToSet","match","find","foundIds","indexOf","entitiesIds","get","includes","DataStoreEntity","dataSource","defineProperties","enumerable","configurable","omit","version","process","dependencies","adapters","dataSources","models","wrapDataSourceAction","callback","queryType","adapter","args","filterResults","remapFields","optIndex","upd","normalizeQuery","number","insertion","queryPromise","isArrayLike","results","check","modelDesc","checkResults","fieldDesc","field","checkField","concat","omitBy","isEmpty","required","validate","join","type","model","spec","isDate","deepTest","attributes","propVal","children","isArray","of","subErrors","v","stubTrue","enum","result","some","enumVal","RegExp","default","defaultField","out","isFunction","createDataSource","adapterLabel","baseAdapter","newDataSource","Proxy","target","method","toLowerCase","registerDataSource","components","merge","createNamedDataSource","declareModel","Model","registerAdapter","label","prototype","Entity","Set","ValidationError","browser","Utils","EntityFactory","modelAttrs","modelAttrsKeys","lastDataSource","seal","entityPrototype","toObject","entityPrototypeProperties","persist","sourceName","skipEvents","getDataSource","beforeState","promise","emit","uidQuery","entityDefined","dataStoreEntity","entityProxied","fetch","destroy","without","sourceKeys","sourceUReserved","intersection","sourceDModel","difference","validationErrors","defineEnumerableProperties","obj","console","warn","enumerate","ownKeys","has","EntityWrapped","writable","reservedPropIntersect","sources","sourcesNormalized","zipObject","times","constant","remap","dataSourceName","sourceNames","scopeAvailableSources","modelSources","pick","missingSources","sourceConfiguring","configureCollection","defaultDataSource","entityFactory","newEntity","spawn","newEntities","collection","dataSourceEntity","flatten","checkEntitiesFromModel","defined","size","prop","nth","all","newData","modelName","subject","handlers","remappedHandlers","handler","getPrototypeOf","stringifyValidationObject","values","identity","message","errorArgs","captureStackTrace","stack","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","setTimeout","clearTimeout","runTimeout","fun","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","nextTick","Array","arguments","Item","array","apply","title","env","argv","versions","noop","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"diaspora.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Diaspora = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nconst Diaspora = require( './lib/diaspora' );\n\nmodule.exports = Diaspora;\n\n},{\"./lib/diaspora\":9}],2:[function(require,module,exports){\n'use strict';\n\nconst {\n\t_, Promise, SequentialEvent,\n} = require( '../dependencies' );\n\n/**\n * @namespace ConstrainedTypes\n * @description Namespace for types with constraints, like <code>[0, Infinity]</code>, <code>]0, Infinity[</code>, etc etc\n */\n\n/**\n * @typedef {Integer} AbsInt0\n * @memberof ConstrainedTypes\n * @description Integer equal or above 0\n */\n\n/**\n * @typedef {Integer} AbsInt\n * @memberof ConstrainedTypes\n * @description Integer above 0\n */\n\n/**\n * @typedef {Integer} AbsIntInf\n * @memberof ConstrainedTypes\n * @description Integer above 0, may be integer\n */\n\n/**\n * @typedef {Integer} AbsIntInf0\n * @memberof ConstrainedTypes\n * @description Integer equal or above 0, may be integer\n */\n\n/**\n * @namespace QueryLanguage\n */\n\n/**\n * @typedef {Object} QueryOptions\n * @description All properties are optional\n * @memberof QueryLanguage\n * @public\n * @instance\n * @author gerkin\n * @property {ConstrainedTypes.AbsInt0} skip=0 Number of items to skip\n * @property {ConstrainedTypes.AbsIntInf0} limit=Infinity Number of items to get\n * @property {ConstrainedTypes.AbsInt0} page To use with {@link QueryOptions.limit `limit`} and without {@link QueryOptions.skip `skip`}. Skips `page` pages of `limit` elements\n * @property {Boolean} remapInput=true Flag indicating if adapter input should be remapped or not. TODO Remapping doc\n * @property {Boolean} remapOutput=true Flag indicating if adapter output should be remapped or not. TODO Remapping doc\n */\n\n/**\n * @typedef {Object} SelectQuery\n * @memberof QueryLanguage\n * @public\n * @instance\n * @author gerkin\n * @property {Any|SelectQueryCondition} * Fields to search. If not providing an object, find items with a property value that equals this value\n */\n\n/**\n * By default, all conditions in a single SelectQueryCondition are combined with an `AND` operator.\n * \n * @typedef {Object} SelectQueryCondition\n * @memberof QueryLanguage\n * @public\n * @instance\n * @author gerkin\n * @property {Any} $equals Match if item value is equal to this. Objects and array are compared deeply. **Alias: `==`**\n * @property {Any} $diff Match if item value is different to this. Objects and array are compared deeply. **Alias: `!=`** **NOT IMPLEMENTED YET**\n * @property {boolean} $exists If `true`, match items where this prop is defined. If `false`, match when prop is null or not set. **Alias: `~`** **NOT IMPLEMENTED YET**\n * @property {integer} $less Match if item value is less than this. **Alias: `<`** **NOT IMPLEMENTED YET**\n * @property {integer} $lessEqual Match if item value is less than this or equals to this. **Alias: `<=`** **NOT IMPLEMENTED YET**\n * @property {integer} $greater Match if item value is greater than this. **Alias: `>`** **NOT IMPLEMENTED YET**\n * @property {integer} $greaterEqual Match if item value is greater than this or equals to this. **Alias: `>=`** **NOT IMPLEMENTED YET** \n * @property {QueryLanguage#SelectQueryOrCondition[]} $or Match if *one of* the conditions in the array is true. **Alias: `||`** **NOT IMPLEMENTED YET**\n * @property {QueryLanguage#SelectQueryOrCondition[]} $and Match if *all* the conditions in the array are true. Optional, because several conditions in a single SelectQueryCondition are combined with an `AND` operator. **Alias: `&&`** **NOT IMPLEMENTED YET**\n * @property {QueryLanguage#SelectQueryOrCondition[]} $xor Match if *a single* of the conditions in the array is true. **Alias: `^^`** **NOT IMPLEMENTED YET**\n * @property {QueryLanguage#SelectQueryOrCondition} $not Invert the condition **Alias: `!`** **NOT IMPLEMENTED YET**\n * @property {string} $contains On *string*, it will check if query is included in item using GLOB. **NOT IMPLEMENTED YET**\n * @property {QueryLanguage#SelectQueryOrCondition|Any} $contains On *array*, it will check if item contains the query. **NOT IMPLEMENTED YET**\n * @property {Any[]} $in Check if item value is contained (using deep comparaison) in query. **NOT IMPLEMENTED YET**\n */\n\n/**\n * @typedef {QueryLanguage#SelectQuery|QueryLanguage#SelectQueryCondition} SelectQueryOrCondition\n * @memberof QueryLanguage\n * @public\n * @instance\n * @author gerkin\n */\n\n/**\n * @namespace Adapters\n */\n\n/**\n * DiasporaAdapter is the base class of adapters. Adapters are components that are in charge to interact with data sources (files, databases, etc etc) with standardized methods. You should not use this class directly: extend this class and re-implement some methods to build an adapter. See the (upcoming) tutorial section.\n * @extends SequentialEvent\n * @memberof Adapters\n * @author gerkin\n */\nclass DiasporaAdapter extends SequentialEvent {\n\n\t// -----\n\t// ### Initialization\n\t\n\t/**\n\t * Create a new instance of adapter. This base class should be used by all other adapters.\n\t * \n\t * @public\n\t * @author gerkin\n\t * @param {DataStoreEntities.DataStoreEntity} classEntity - Entity to spawn with this adapter.\n\t */\n\tconstructor( classEntity ) {\n\t\tsuper();\n\t\t/**\n\t\t * Describe current adapter status.\n\t\t * \n\t\t * @type {string}\n\t\t * @author Gerkin\n\t\t */\n\t\tthis.state = 'preparing';\n\t\t/**\n\t\t * Hash to transform entity fields to data store fields.\n\t\t * \n\t\t * @type {Object}\n\t\t * @property {string} * - Data store field associated with this entity field.\n\t\t * @author Gerkin\n\t\t */\n\t\tthis.remaps = {};\n\t\t/**\n\t\t * Hash to transform data store fields to entity fields.\n\t\t * \n\t\t * @type {Object}\n\t\t * @property {string} * - Entity field associated with this data store field.\n\t\t * @author Gerkin\n\t\t */\n\t\tthis.remapsInverted = {};\n\t\t/**\n\t\t * Hash of functions to cast data store values to JSON standard values in entity.\n\t\t * \n\t\t * @type {Object}\n\t\t * @property {Function} * - Filter to execute to get standard JSON value.\n\t\t * @author Gerkin\n\t\t */\n\t\tthis.filters = {};\n\t\t/**\n\t\t * Link to the constructor of the class generated by this adapter.\n\t\t * \n\t\t * @type {DataStoreEntities.DataStoreEntity}\n\t\t * @author Gerkin\n\t\t */\n\t\tthis.classEntity = classEntity;\n\t\t/**\n\t\t * Error triggered by adapter initialization.\n\t\t * \n\t\t * @type {Error}\n\t\t * @author Gerkin\n\t\t */\n\t\tthis.error = undefined;\n\t\t\n\t\t// Bind events\n\t\tthis.on( 'ready', () => {\n\t\t\tthis.state = 'ready';\n\t\t}).on( 'error', err => {\n\t\t\tthis.state = 'error';\n\t\t\tthis.error = err;\n\t\t});\n\t}\n\n\t/**\n\t * Saves the remapping table, the reversed remapping table and the filter table in the adapter. Those tables will be used later when manipulating models & entities.\n\t * \n\t * @author gerkin\n\t * @param   {string} tableName    - Name of the table (usually, model name).\n\t * @param   {Object} remaps       - Associative hash that links entity field names with data source field names.\n\t * @param   {Object} [filters={}] - Not used yet...\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tconfigureCollection( tableName, remaps, filters = {}) {\n\t\tthis.remaps[tableName] = remaps;\n\t\tthis.remapsInverted[tableName] = _.invert( remaps );\n\t\tthis.filters = filters || {};\n\t}\n\n\t// -----\n\t// ### Events\n\n\t/**\n\t * Fired when the adapter is ready to use. You should not try to use the adapter before this event is emitted.\n\t * \n\t * @event Adapters.DiasporaAdapter#ready\n\t * @type {undefined}\n\t * @see {@link Adapters.DiasporaAdapter#waitReady waitReady} Convinience method to wait for state change.\n\t */\n\n\t/**\n\t * Fired if the adapter failed to initialize or changed to `error` state. Called with the triggering `error`.\n\t * \n\t * @event Adapters.DiasporaAdapter#error\n\t * @type {Error}\n\t * @see {@link Adapters.DiasporaAdapter#waitReady waitReady} Convinience method to wait for state change.\n\t */\n\n\t// -----\n\t// ### Utils\n\n\t/**\n\t * Returns a promise resolved once adapter state is ready.\n\t * \n\t * @author gerkin\n\t * @listens Adapters.DiasporaAdapter#error\n\t * @listens Adapters.DiasporaAdapter#ready\n\t * @returns {Promise} Promise resolved when adapter is ready, and rejected if an error occured.\n\t */\n\twaitReady() {\n\t\treturn new Promise(( resolve, reject ) => {\n\t\t\tif ( 'ready' === this.state ) {\n\t\t\t\treturn resolve( this );\n\t\t\t} else if ( 'error' === this.state ) {\n\t\t\t\treturn reject( this.error );\n\t\t\t}\n\t\t\tthis.on( 'ready', () => {\n\t\t\t\treturn resolve( this );\n\t\t\t}).on( 'error', err => {\n\t\t\t\treturn reject( err );\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Cast entity field names to table field name, or the opposite.\n\t * \n\t * @author gerkin\n\t * @param   {string}  tableName      - Name of the table we are remapping for.\n\t * @param   {Object}  query          - Hash representing the raw query to remap.\n\t * @param   {boolean} [invert=false] - `false` to cast to `table` field names, `true` to cast to `entity` field name.\n\t * @returns {Object} Remapped object.\n\t */\n\tremapFields( tableName, query, invert = false ) {\n\t\tconst keysMap = ( invert ? this.remapsInverted : this.remaps )[tableName];\n\t\tif ( _.isNil( keysMap )) {\n\t\t\treturn query;\n\t\t}\n\t\treturn _.mapKeys( query, ( value, key ) => {\n\t\t\tif ( keysMap.hasOwnProperty( key )) {\n\t\t\t\treturn keysMap[key];\n\t\t\t}\n\t\t\treturn key;\n\t\t});\n\t}\n\n\t/**\n\t * TODO.\n\t * \n\t * @author gerkin\n\t * @see TODO remapping.\n\t * @param   {string} tableName - Name of the table for which we remap.\n\t * @param   {Object} query     - Hash representing the entity to remap.\n\t * @returns {Object} Remapped object.\n\t */\n\tremapInput( tableName, query ) {\n\t\tif ( _.isNil( query )) {\n\t\t\treturn query;\n\t\t}\n\t\tconst filtered = _.mapValues( query, ( value, key ) => {\n\t\t\tif ( this.filters.input.hasOwnProperty( key )) {\n\t\t\t\treturn this.filters.input[key]( value );\n\t\t\t}\n\t\t\treturn value;\n\t\t});\n\t\tconst remaped = _.mapKeys( filtered, ( value, key ) => {\n\t\t\tif ( this.remaps.hasOwnProperty( key )) {\n\t\t\t\treturn this.remaps[key];\n\t\t\t}\n\t\t\treturn key;\n\t\t});\n\t\treturn remaped;\n\t}\n\n\t/**\n\t * TODO.\n\t * \n\t * @author gerkin\n\t * @see TODO remapping.\n\t * @param   {string} tableName - Name of the table for which we remap.\n\t * @param   {Object} query     - Hash representing the entity to remap.\n\t * @returns {Object} Remapped object.\n\t */\n\tremapOutput( tableName, query ) {\n\t\tif ( _.isNil( query )) {\n\t\t\treturn query;\n\t\t}\n\t\tconst filtered = _.mapValues( query, ( value, key ) => {\n\t\t\tif ( this.filters.output.hasOwnProperty( key )) {\n\t\t\t\treturn this.filters.output[key]( value );\n\t\t\t}\n\t\t\treturn value;\n\t\t});\n\t\tconst remaped = _.mapKeys( filtered, ( value, key ) => {\n\t\t\tif ( this.remapsInverted.hasOwnProperty( key )) {\n\t\t\t\treturn this.remapsInverted[key];\n\t\t\t}\n\t\t\treturn key;\n\t\t});\n\t\treturn remaped;\n\t}\n\n\t/**\n\t * Refresh the `idHash` with current adapter's `id` injected.\n\t * \n\t * @author gerkin\n\t * @param   {Object} entity          - Object containing attributes of the entity.\n\t * @param   {string} [propName='id'] - Name of the `id` field.\n\t * @returns {Object} Modified entity (for chaining).\n\t */\n\tsetIdHash( entity, propName = 'id' ) {\n\t\tentity.idHash = _.assign({}, entity.idHash, {\n\t\t\t[this.name]: entity[propName],\n\t\t});\n\t\treturn entity;\n\t}\n\n\t/**\n\t * Check if provided `entity` is matched by the query. Query must be in its canonical form before using this function.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQuery} query  - Query to match against.\n\t * @param   {Object}                    entity - Entity to test.\n\t * @returns {boolean} `true` if query matches, `false` otherwise.\n\t */\n\tmatchEntity( query, entity ) {\n\t\tconst matchResult = _.every( _.toPairs( query ), ([ key, desc ]) => {\n\t\t\tif ( _.isObject( desc )) {\n\t\t\t\tconst entityVal = entity[key];\n\t\t\t\treturn _.every( desc, ( val, operation ) => {\n\t\t\t\t\tswitch ( operation ) {\n\t\t\t\t\t\tcase '$exists': {\n\t\t\t\t\t\t\treturn val === !_.isUndefined( entityVal );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '$equal': {\n\t\t\t\t\t\t\treturn !_.isUndefined( entityVal ) && entityVal === val;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '$diff': {\n\t\t\t\t\t\t\treturn !_.isUndefined( entityVal ) && entityVal !== val;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '$less': {\n\t\t\t\t\t\t\treturn !_.isUndefined( entityVal ) && entityVal < val;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '$lessEqual': {\n\t\t\t\t\t\t\treturn !_.isUndefined( entityVal ) && entityVal <= val;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '$greater': {\n\t\t\t\t\t\t\treturn !_.isUndefined( entityVal ) && entityVal > val;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '$greaterEqual': {\n\t\t\t\t\t\t\treturn !_.isUndefined( entityVal ) && entityVal >= val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\treturn matchResult;\n\t}\n\n\t/**\n\t * Merge update query with the entity. This operation allows to delete fields.\n\t * \n\t * @author gerkin\n\t * @param   {Object} update - Hash representing modified values. A field with an `undefined` value deletes this field from the entity.\n\t * @param   {Object} entity - Entity to update.\n\t * @returns {Object} Entity modified.\n\t */\n\tapplyUpdateEntity( update, entity ) {\n\t\t_.forEach( update, ( val, key ) => {\n\t\t\tif ( _.isUndefined( val )) {\n\t\t\t\tdelete entity[key];\n\t\t\t} else {\n\t\t\t\tentity[key] = val;\n\t\t\t}\n\t\t});\n\t\treturn entity;\n\t}\n\n\t/**\n\t * Transform options to their canonical form. This function must be applied before calling adapters' methods.\n\t * \n\t * @author gerkin\n\t * @throws  {TypeError} Thrown if an option does not have an acceptable type.\n\t * @throws  {ReferenceError} Thrown if a required option is not present.\n\t * @throws  {Error} Thrown when there isn't more precise description of the error is available (eg. when conflicts occurs) .\n\t * @param   {Object} [opts={}] - Options to transform.\n\t * @returns {Object} Transformed options (also called `canonical options`).\n\t */\n\tnormalizeOptions( opts = {}) {\n\t\topts = _.cloneDeep( opts );\n\t\tif ( opts.hasOwnProperty( 'limit' )) {\n\t\t\tlet limitOpt = opts.limit;\n\t\t\tif ( _.isString( limitOpt )) {\n\t\t\t\tlimitOpt = parseInt( limitOpt );\n\t\t\t}\n\t\t\tif ( !( _.isInteger( limitOpt ) || Infinity === limitOpt ) || limitOpt < 0 ) {\n\t\t\t\tthrow new TypeError( `Expect \"options.limit\" to be an integer equal to or above 0, have ${ limitOpt }` );\n\t\t\t}\n\t\t\topts.limit = limitOpt;\n\t\t}\n\t\tif ( opts.hasOwnProperty( 'skip' )) {\n\t\t\tlet skipOpt = opts.skip;\n\t\t\tif ( _.isString( skipOpt )) {\n\t\t\t\tskipOpt = parseInt( skipOpt );\n\t\t\t}\n\t\t\tif ( !_.isInteger( skipOpt ) || skipOpt < 0 || !isFinite( skipOpt )) {\n\t\t\t\tthrow new TypeError( `Expect \"options.skip\" to be a finite integer equal to or above 0, have ${ skipOpt }` );\n\t\t\t}\n\t\t\topts.skip = skipOpt;\n\t\t}\n\t\tif ( opts.hasOwnProperty( 'page' )) {\n\t\t\tif ( !opts.hasOwnProperty( 'limit' )) {\n\t\t\t\tthrow new ReferenceError( 'Usage of \"options.page\" requires \"options.limit\" to be defined.' );\n\t\t\t}\n\t\t\tif ( !isFinite( opts.limit )) {\n\t\t\t\tthrow new ReferenceError( 'Usage of \"options.page\" requires \"options.limit\" to not be infinite' );\n\t\t\t}\n\t\t\tif ( opts.hasOwnProperty( 'skip' )) {\n\t\t\t\tthrow new Error( 'Use either \"options.page\" or \"options.skip\"' );\n\t\t\t}\n\t\t\tlet pageOpt = opts.page;\n\t\t\tif ( _.isString( pageOpt )) {\n\t\t\t\tpageOpt = parseInt( pageOpt );\n\t\t\t}\n\t\t\tif ( !_.isInteger( pageOpt ) || pageOpt < 0 ) {\n\t\t\t\tthrow new TypeError( `Expect \"options.page\" to be an integer equal to or above 0, have ${ pageOpt }` );\n\t\t\t}\n\t\t\topts.skip = pageOpt * opts.limit;\n\t\t\tdelete opts.page;\n\t\t}\n\t\t_.defaults( opts, {\n\t\t\tskip:        0,\n\t\t\tremapInput:  true,\n\t\t\tremapOutput: true,\n\t\t});\n\t\treturn opts;\n\t}\n\n\t/**\n\t * Transform a search query to its canonical form, replacing aliases or shorthands by full query.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQueryOrCondition} originalQuery - Query to cast to its canonical form.\n\t * @param   {QueryLanguage#Options}                options       - Options for this query.\n\t * @returns {QueryLanguage#SelectQueryOrCondition} Query in its canonical form.\n\t */\n\tnormalizeQuery( originalQuery, options ) {\n\t\tconst canonicalOperations = {\n\t\t\t'~':  '$exists',\n\t\t\t'==': '$equal',\n\t\t\t'!=': '$diff',\n\t\t\t'<':  '$less',\n\t\t\t'<=': '$lessEqual',\n\t\t\t'>':  '$greater',\n\t\t\t'>=': '$greaterEqual',\n\t\t};\n\t\tconst normalizedQuery = true === options.remapInput ? _( _.cloneDeep( originalQuery )).mapValues( attrSearch => {\n\t\t\tif ( !( !_.isNil( attrSearch ) && attrSearch instanceof Object )) {\n\t\t\t\tif ( !_.isNil( attrSearch )) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$equal: attrSearch,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Replace operations alias by canonical expressions\n\t\t\t\t_.forEach( canonicalOperations, ( canon, alias ) => {\n\t\t\t\t\t// If the currently checked alias is in the search hash...\n\t\t\t\t\tif ( attrSearch.hasOwnProperty( alias )) {\n\t\t\t\t\t\t// ... check for conflict with canonical operation name...\n\t\t\t\t\t\tif ( attrSearch.hasOwnProperty( canon )) {\n\t\t\t\t\t\t\tthrow new Error( `Search can't have both \"${ alias }\" and \"${ canon }\" keys, as they are synonyms` );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// ... and replace alias by canonical\n\t\t\t\t\t\t\tattrSearch[canon] = attrSearch[alias];\n\t\t\t\t\t\t\tdelete attrSearch[alias];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// For arithmetic comparison, check if values are numeric (TODO later: support date)\n\t\t\t\t_.forEach([ '$less', '$lessEqual', '$greater', '$greaterEqual' ], operation => {\n\t\t\t\t\tif ( attrSearch.hasOwnProperty( operation ) && !_.isNumber( attrSearch[operation])) {\n\t\t\t\t\t\tthrow new TypeError( `Expect \"${ operation }\" in ${ JSON.stringify( attrSearch ) } to be a numeric value` );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn attrSearch;\n\t\t\t}\n\t\t}).value() : _.cloneDeep( originalQuery );\n\t\treturn normalizedQuery;\n\t}\n\n\t// -----\n\t// ### Insert\n\n\t/**\n\t * Insert a single entity in the data store. This function is a default polyfill if the inheriting adapter does not provide `insertOne` itself.\n\t * \n\t * @summary At least one of {@link insertOne} or {@link insertMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string} table  - Name of the table to insert data in.\n\t * @param   {Object} entity - Hash representing the entity to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link DataStoreEntity}* entity).\n\t */\n\tinsertOne( table, entity ) {\n\t\treturn this.insertMany( table, [ entity ]).then( entities => Promise.resolve( _.first( entities )));\n\t}\n\n\t/**\n\t * Insert several entities in the data store. This function is a default polyfill if the inheriting adapter does not provide `insertMany` itself.\n\t * \n\t * @summary At least one of {@link insertOne} or {@link insertMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string}   table    - Name of the table to insert data in.\n\t * @param   {Object[]} entities - Array of hashs representing the entities to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link DataStoreEntity}[]* entities).\n\t */\n\tinsertMany( table, entities ) {\n\t\treturn Promise.mapSeries( entities, entity => this.insertOne( table, entity || {}));\n\t}\n\n\t// -----\n\t// ### Find\n\n\t/**\n\t * Retrieve a single entity from the data store. This function is a default polyfill if the inheriting adapter does not provide `findOne` itself.\n\t * \n\t * @summary At least one of {@link findOne} or {@link findMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntity}* `entity`).\n\t */\n\tfindOne( table, queryFind, options = {}) {\n\t\toptions.limit = 1;\n\t\treturn this.findMany( table, queryFind, options ).then( entities => Promise.resolve( _.first( entities )));\n\t}\n\n\t/**\n\t * Retrieve several entities from the data store. This function is a default polyfill if the inheriting adapter does not provide `findMany` itself.\n\t * \n\t * @summary At least one of {@link findOne} or {@link findMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntity}[]* `entities`).\n\t */\n\tfindMany( table, queryFind, options = {}) {\n\t\tconst foundEntities = [];\n\t\toptions = this.normalizeOptions( options );\n\t\tlet foundCount = 0;\n\t\tlet origSkip = options.skip;\n\n\t\t// We are going to loop until we find enough items\n\t\tconst loopFind = found => {\n\t\t\t// If the search returned nothing, then just finish the findMany\n\t\t\tif ( _.isNil( found )) {\n\t\t\t\treturn Promise.resolve( foundEntities );\n\t\t\t\t// Else, if this is a value and not the initial `true`, add it to the list\n\t\t\t} else if ( found !== true ) {\n\t\t\t\tfoundEntities.push( found );\n\t\t\t}\n\t\t\t// If we found enough items, return them\n\t\t\tif ( foundCount === options.limit ) {\n\t\t\t\treturn Promise.resolve( foundEntities );\n\t\t\t}\n\t\t\toptions.skip = origSkip + foundCount;\n\t\t\t// Next time we'll skip 1 more item\n\t\t\tfoundCount++;\n\t\t\t// Do the query & loop\n\t\t\treturn this.findOne( table, queryFind, options ).then( loopFind );\n\t\t};\n\t\treturn loopFind( true );\n\t}\n\n\t// -----\n\t// ### Update\n\n\t/**\n\t * Update a single entity from the data store. This function is a default polyfill if the inheriting adapter does not provide `updateOne` itself.\n\t * \n\t * @summary At least one of {@link updateOne} or {@link updateMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntity}* `entity`).\n\t */\n\tupdateOne( table, queryFind, update, options = {}) {\n\t\toptions.limit = 1;\n\t\treturn this.updateMany( table, queryFind, update, options ).then( entities => Promise.resolve( _.first( entities )));\n\t}\n\n\t/**\n\t * Update several entities from the data store. This function is a default polyfill if the inheriting adapter does not provide `updateMany` itself.\n\t * \n\t * @summary At least one of {@link updateOne} or {@link updateMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntity}[]* `entities`).\n\t */\n\tupdateMany( table, queryFind, update, options = {}) {\n\t\tconst foundEntities = [];\n\t\tlet skip = 0;\n\n\t\t// We are going to loop until we find enough items\n\t\tconst loopFind = found => {\n\t\t\t// If the search returned nothing, then just finish the findMany\n\t\t\tif ( _.isNil( found )) {\n\t\t\t\treturn Promise.resolve( foundEntities );\n\t\t\t\t// Else, if this is a value and not the initial `true`, add it to the list\n\t\t\t} else if ( found !== true ) {\n\t\t\t\tfoundEntities.push( found );\n\t\t\t}\n\t\t\t// If we found enough items, return them\n\t\t\tif ( skip === options.limit ) {\n\t\t\t\treturn Promise.resolve( foundEntities );\n\t\t\t}\n\t\t\toptions.skip = skip;\n\t\t\t// Next time we'll skip 1 more item\n\t\t\tskip++;\n\t\t\t// Do the query & loop\n\t\t\treturn this.updateOne( table, queryFind, update, options ).then( loopFind );\n\t\t};\n\t\treturn loopFind( true );\n\t}\n\n\t// -----\n\t// ### Delete\n\n\t/**\n\t * Delete a single entity from the data store. This function is a default polyfill if the inheriting adapter does not provide `deleteOne` itself.\n\t * \n\t * @summary At least one of {@link deleteOne} or {@link deleteMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntity}* `entity`).\n\t */\n\tdeleteOne( table, queryFind, options = {}) {\n\t\toptions.limit = 1;\n\t\treturn this.deleteMany( table, queryFind, options );\n\t}\n\n\t/**\n\t * Delete several entities from the data store. This function is a default polyfill if the inheriting adapter does not provide `deleteMany` itself.\n\t * \n\t * @summary At least one of {@link deleteOne} or {@link deleteMany} must be reimplemented by adapter.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntity}[]* `entities`).\n\t */\n\tdeleteMany( table, queryFind, options = {}) {\n\t\tlet count = 0;\n\n\t\t// We are going to loop until we find enough items\n\t\tconst loopFind = () => {\n\t\t\t// First, search for the item.\n\t\t\treturn this.findOne( table, queryFind, options ).then( found => {\n\t\t\t\t// If the search returned nothing, then just finish the findMany\n\t\t\t\tif ( _.isNil( found )) {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t// Else, if this is a value and not the initial `true`, add it to the list\n\t\t\t\t}\n\t\t\t\t// If we found enough items, return them\n\t\t\t\tif ( count === options.limit ) {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t\t// Increase our counter\n\t\t\t\tcount++;\n\t\t\t\t// Do the deletion & loop\n\t\t\t\treturn this.deleteOne( table, queryFind, options ).then( loopFind );\n\t\t\t});\n\t\t};\n\t\treturn loopFind( true );\n\t}\n}\n\nmodule.exports = DiasporaAdapter;\n\n},{\"../dependencies\":8}],3:[function(require,module,exports){\n(function (global){\n'use strict';\n\nconst {\n\t_, Promise,\n} = require( '../dependencies' );\nconst DiasporaAdapter = require( './baseAdapter.js' );\nconst BrowserStorageEntity = require( '../dataStoreEntities/browserStorageEntity.js' );\n\n/**\n * This class is used to use local storage or session storage as a data store. This adapter should be used only by the browser.\n * \n * @extends Adapters.DiasporaAdapter\n * @memberof Adapters\n */\nclass BrowserStorageDiasporaAdapter extends DiasporaAdapter {\n\t/**\n\t * Create a new instance of local storage adapter.\n\t * \n\t * @author gerkin\n\t * @param {Object}  config                 - Configuration object.\n\t * @param {boolean} [config.session=false] - Set to true to use sessionStorage instead of localStorage.\n\t */\n\tconstructor( config ) {\n\t\t/**\n\t\t * Link to the BrowserStorageEntity.\n\t\t * \n\t\t * @name classEntity\n\t\t * @type {DataStoreEntities.BrowserStorageEntity}\n\t\t * @memberof Adapters.BrowserStorageDiasporaAdapter\n\t\t * @instance\n\t\t * @author Gerkin\n\t\t */\n\t\tsuper( BrowserStorageEntity );\n\t\t_.defaults( config, {\n\t\t\tsession: false,\n\t\t});\n\t\tthis.state = 'ready';\n\t\t/**\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/API/Storage Storage api} where to store data.\n\t\t * \n\t\t * @type {Storage}\n\t\t * @author Gerkin\n\t\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage localStorage} and {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage sessionStorage} on MDN web docs.\n\t\t * @see {@link Adapters.BrowserStorageDiasporaAdapter}:config.session parameter.\n\t\t */\n\t\tthis.source = ( true === config.session ? global.sessionStorage : global.localStorage );\n\t}\n\n\t/**\n\t * Create the collection index and call {@link Adapters.DiasporaAdapter#configureCollection}.\n\t * \n\t * @author gerkin\n\t * @param {string} tableName - Name of the table (usually, model name).\n\t * @param {Object} remaps    - Associative hash that links entity field names with data source field names.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tconfigureCollection( tableName, remaps ) {\n\t\tsuper.configureCollection( tableName, remaps );\n\t\tthis.ensureCollectionExists( tableName );\n\t}\n\n\t// -----\n\t// ### Utils\n\n\t/**\n\t * Create a new unique id for this store's entity.\n\t * \n\t * @author gerkin\n\t * @returns {string} Generated unique id.\n\t */\n\tgenerateUUID() {\n\t\tlet d = new Date().getTime();\n\t\tif ( global.performance && 'function' === typeof global.performance.now ) {\n\t\t\td += global.performance.now(); //use high-precision timer if available\n\t\t}\n\t\tconst uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, c => {\n\t\t\tconst r = ( d + Math.random() * 16 ) % 16 | 0;\n\t\t\td = Math.floor( d / 16 );\n\t\t\treturn ( 'x' === c ? r : ( r & 0x3 | 0x8 )).toString( 16 );\n\t\t});\n\t\treturn uuid;\n\t}\n\n\t/**\n\t * Create the table key if it does not exist.\n\t * \n\t * @author gerkin\n\t * @param   {string} table - Name of the table.\n\t * @returns {string[]} Index of the collection.\n\t */\n\tensureCollectionExists( table ) {\n\t\tlet index = this.source.getItem( table );\n\t\tif ( _.isNil( index )) {\n\t\t\tindex = [];\n\t\t\tthis.source.setItem( table, JSON.stringify( index ));\n\t\t} else {\n\t\t\tindex = JSON.parse( index );\n\t\t}\n\t\treturn index;\n\t}\n\n\t/**\n\t * Reduce, offset or sort provided set.\n\t * \n\t * @author gerkin\n\t * @param   {Object[]} set     - Objects retrieved from memory store.\n\t * @param   {Object}   options - Options to apply to the set.\n\t * @returns {Object[]} Set with options applied.\n\t */\n\tstatic applyOptionsToSet( set, options ) {\n\t\t_.defaults( options, {\n\t\t\tlimit: Infinity,\n\t\t\tskip:  0,\n\t\t});\n\t\tset = set.slice( options.skip );\n\t\tif ( set.length > options.limit ) {\n\t\t\tset = set.slice( 0, options.limit );\n\t\t}\n\t\treturn set;\n\t}\n\n\t/**\n\t * Deduce the item name from table name and item ID.\n\t * \n\t * @author gerkin\n\t * @param   {string} table - Name of the table to construct name for.\n\t * @param   {string} id    - Id of the item to find.\n\t * @returns {string} Name of the item.\n\t */\n\tgetItemName( table, id ) {\n\t\treturn `${ table }.id=${ id }`;\n\t}\n\n\t// -----\n\t// ### Insert\n\n\t/**\n\t * Insert a single entity in the local storage.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#insertOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string} table  - Name of the table to insert data in.\n\t * @param   {Object} entity - Hash representing the entity to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link DataStoreEntities.BrowserStorageEntity}* `entity`).\n\t */\n\tinsertOne( table, entity ) {\n\t\tentity = _.cloneDeep( entity || {});\n\t\tentity.id = this.generateUUID();\n\t\tthis.setIdHash( entity );\n\t\ttry {\n\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\ttableIndex.push( entity.id );\n\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t\tthis.source.setItem( this.getItemName( table, entity.id ), JSON.stringify( entity ));\n\t\t} catch ( error ) {\n\t\t\treturn Promise.reject( error );\n\t\t}\n\t\treturn Promise.resolve( new this.classEntity( entity, this ));\n\t}\n\n\t/**\n\t * Insert several entities in the local storage.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#insertMany}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}   table    - Name of the table to insert data in.\n\t * @param   {Object[]} entities - Array of hashes representing entities to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link DataStoreEntities.BrowserStorageEntity}[]* `entities`).\n\t */\n\tinsertMany( table, entities ) {\n\t\tentities = _.cloneDeep( entities );\n\t\ttry {\n\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\tentities = entities.map(( entity = {}) => {\n\t\t\t\tentity.id = this.generateUUID();\n\t\t\t\tthis.setIdHash( entity );\n\t\t\t\ttableIndex.push( entity.id );\n\t\t\t\tthis.source.setItem( this.getItemName( table, entity.id ), JSON.stringify( entity ));\n\t\t\t\treturn new this.classEntity( entity, this );\n\t\t\t});\n\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t} catch ( error ) {\n\t\t\treturn Promise.reject( error );\n\t\t}\n\t\treturn Promise.resolve( entities );\n\t}\n\n\t// -----\n\t// ### Find\n\n\t/**\n\t * Find a single local storage entity using its id.\n\t * \n\t * @author gerkin\n\t * @param   {string} table - Name of the collection to search entity in.\n\t * @param   {string} id    - Id of the entity to search.\n\t * @returns {DataStoreEntities.BrowserStorageEntity|undefined} Found entity, or undefined if not found.\n\t */\n\tfindOneById( table, id ) {\n\t\tconst item = this.source.getItem( this.getItemName( table, id ));\n\t\tif ( !_.isNil( item )) {\n\t\t\treturn Promise.resolve( new this.classEntity( JSON.parse( item ), this ));\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Retrieve a single entity from the local storage.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#findOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the model to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntities.BrowserStorageEntity}* `entity`).\n\t */\n\tfindOne( table, queryFind, options = {}) {\n\t\t_.defaults( options, {\n\t\t\tskip: 0,\n\t\t});\n\t\tif ( !_.isObject( queryFind )) {\n\t\t\treturn this.findOneById( table, queryFind );\n\t\t} else if ( _.isEqual( _.keys( queryFind ), [ 'id' ]) && _.isEqual( _.keys( queryFind.id ), [ '$equal' ])) {\n\t\t\treturn this.findOneById( table, queryFind.id.$equal );\n\t\t}\n\t\tconst items = this.ensureCollectionExists( table );\n\t\tlet returnedItem;\n\t\tlet matched = 0;\n\t\t_.each( items, itemId => {\n\t\t\tconst item = JSON.parse( this.source.getItem( this.getItemName( table, itemId )));\n\t\t\tif ( this.matchEntity( queryFind, item )) {\n\t\t\t\tmatched++;\n\t\t\t\t// If we matched enough items\n\t\t\t\tif ( matched > options.skip ) {\n\t\t\t\t\treturnedItem = item;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn Promise.resolve( !_.isNil( returnedItem ) ? new this.classEntity( returnedItem, this ) : undefined );\n\t}\n\n\t// -----\n\t// ### Update\n\n\t/**\n\t * Update a single entity in the memory.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#updateOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to update data in.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once update is done. Called with (*{@link DataStoreEntities.BrowserStorageEntity}* `entity`).\n\t */\n\tupdateOne( table, queryFind, update, options ) {\n\t\t_.defaults( options, {\n\t\t\tskip: 0,\n\t\t});\n\t\treturn this.findOne( table, queryFind, options ).then( entity => {\n\t\t\tif ( _.isNil( entity )) {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tthis.applyUpdateEntity( update, entity );\n\t\t\ttry {\n\t\t\t\tthis.source.setItem( this.getItemName( table, entity.id ), JSON.stringify( entity ));\n\t\t\t\treturn Promise.resolve( entity );\n\t\t\t} catch ( error ) {\n\t\t\t\treturn Promise.reject( error );\n\t\t\t}\n\t\t});\n\t}\n\n\t// -----\n\t// ### Delete\n\n\t/**\n\t * Delete a single entity from the local storage.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is deleted. Called with (*undefined*).\n\t */\n\tdeleteOne( table, queryFind, options = {}) {\n\t\treturn this.findOne( table, queryFind, options ).then( entityToDelete => {\n\t\t\ttry {\n\t\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\t\t_.pull( tableIndex, entityToDelete.id );\n\t\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t\t\tthis.source.removeItem( this.getItemName( table, entityToDelete.id ));\n\t\t\t} catch ( error ) {\n\t\t\t\treturn Promise.reject( error );\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t});\n\t}\n\n\t/**\n\t * Delete several entities from the local storage.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteMany}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once items are deleted. Called with (*undefined*).\n\t */\n\tdeleteMany( table, queryFind, options = {}) {\n\t\ttry {\n\t\t\treturn this.findMany( table, queryFind, options ).then( entitiesToDelete => {\n\t\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\t\t_.pullAll( tableIndex, _.map( entitiesToDelete, 'id' ));\n\t\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t\t\t_.forEach( entitiesToDelete, entityToDelete => {\n\t\t\t\t\tthis.source.removeItem( this.getItemName( table, entityToDelete.id ));\n\t\t\t\t});\n\t\t\t\treturn Promise.resolve();\n\t\t\t});\n\t\t} catch ( error ) {\n\t\t\treturn Promise.reject( error );\n\t\t}\n\t}\n}\n\nmodule.exports = BrowserStorageDiasporaAdapter;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../dataStoreEntities/browserStorageEntity.js\":6,\"../dependencies\":8,\"./baseAdapter.js\":2}],4:[function(require,module,exports){\n(function (global){\n'use strict';\n\nconst {\n\t_, Promise,\n} = require( '../dependencies' );\n\nconst DiasporaAdapter = require( './baseAdapter.js' );\nconst InMemoryEntity = require( '../dataStoreEntities/inMemoryEntity.js' );\n\n/**\n * This class is used to use the memory as a data store. Every data you insert are stored in an array contained by this class. This adapter can be used by both the browser & Node.JS.\n * \n * @extends Adapters.DiasporaAdapter\n * @memberof Adapters\n */\nclass InMemoryDiasporaAdapter extends DiasporaAdapter {\n\t/**\n\t * Create a new instance of in memory adapter.\n\t * \n\t * @author gerkin\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Link to the InMemoryEntity.\n\t\t * \n\t\t * @name classEntity\n\t\t * @type {DataStoreEntities.InMemoryEntity}\n\t\t * @memberof Adapters.InMemoryDiasporaAdapter\n\t\t * @instance\n\t\t * @author Gerkin\n\t\t */\n\t\tsuper( InMemoryEntity );\n\t\tthis.state = 'ready';\n\t\t/**\n\t\t * Plain old javascript object used as data store.\n\t\t * \n\t\t * @author Gerkin\n\t\t */\n\t\tthis.store = {};\n\t}\n\n\t/**\n\t * Create the data store and call {@link Adapters.DiasporaAdapter#configureCollection}.\n\t * \n\t * @author gerkin\n\t * @param   {string} tableName - Name of the table (usually, model name).\n\t * @param   {Object} remaps    - Associative hash that links entity field names with data source field names.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tconfigureCollection( tableName, remaps ) {\n\t\tsuper.configureCollection( tableName, remaps );\n\t\tthis.ensureCollectionExists( tableName );\n\t}\n\n\t// -----\n\t// ### Utils\n\n\t/**\n\t * Create a new unique id for this store's entity.\n\t * \n\t * @author gerkin\n\t * @returns {string} Generated unique id.\n\t */\n\tgenerateUUID() {\n\t\tlet d = new Date().getTime();\n\t\t// Use high-precision timer if available\n\t\tif ( global.performance && 'function' === typeof global.performance.now ) {\n\t\t\td += global.performance.now();\n\t\t}\n\t\tconst uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, c => {\n\t\t\tconst r = ( d + Math.random() * 16 ) % 16 | 0;\n\t\t\td = Math.floor( d / 16 );\n\t\t\treturn ( 'x' === c ? r : ( r & 0x3 | 0x8 )).toString( 16 );\n\t\t});\n\t\treturn uuid;\n\t}\n\n\t/**\n\t * Get or create the store hash.\n\t * \n\t * @author gerkin\n\t * @param   {string} table - Name of the table.\n\t * @returns {DataStoreTable} In memory table to use.\n\t */\n\tensureCollectionExists( table ) {\n\t\tif ( this.store.hasOwnProperty( table )) {\n\t\t\treturn this.store[table];\n\t\t} else {\n\t\t\treturn this.store[table] = {\n\t\t\t\titems: [],\n\t\t\t};\n\t\t} \n\t}\n\n\t/**\n\t * Reduce, offset or sort provided set.\n\t * \n\t * @author gerkin\n\t * @param   {Object[]} set     - Objects retrieved from memory store.\n\t * @param   {Object}   options - Options to apply to the set.\n\t * @returns {Object[]} Set with options applied.\n\t */\n\tstatic applyOptionsToSet( set, options ) {\n\t\t_.defaults( options, {\n\t\t\tlimit: Infinity,\n\t\t\tskip:  0,\n\t\t});\n\t\tset = set.slice( options.skip );\n\t\tif ( set.length > options.limit ) {\n\t\t\tset = set.slice( 0, options.limit );\n\t\t}\n\t\treturn set;\n\t}\n\n\t// -----\n\t// ### Insert\n\n\t/**\n\t * Insert a single entity in the memory store.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#insertOne}, modified for in-memory interactions.\n\t * @author gerkin\n\t * @param   {string} table  - Name of the table to insert data in.\n\t * @param   {Object} entity - Hash representing the entity to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link InMemoryEntity}* `entity`).\n\t */\n\tinsertOne( table, entity ) {\n\t\tentity = _.cloneDeep( entity );\n\t\tconst storeTable = this.ensureCollectionExists( table );\n\t\tentity.id = this.generateUUID();\n\t\tthis.setIdHash( entity );\n\t\tstoreTable.items.push( entity );\n\t\treturn Promise.resolve( new this.classEntity( entity, this ));\n\t}\n\n\t// -----\n\t// ### Find\n\n\t/**\n\t * Retrieve a single entity from the memory.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#findOne}, modified for in-memory interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link InMemoryEntity}* `entity`).\n\t */\n\tfindOne( table, queryFind, options = {}) {\n\t\tconst storeTable = this.ensureCollectionExists( table );\n\t\tconst matches = _.filter( storeTable.items, _.partial( this.matchEntity, queryFind ));\n\t\tconst reducedMatches = this.constructor.applyOptionsToSet( matches, options );\n\t\treturn Promise.resolve( reducedMatches.length > 0 ? new this.classEntity( _.first( reducedMatches ), this ) : undefined );\n\t}\n\n\t/**\n\t * Retrieve several entities from the memory.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#findMany}, modified for in-memory interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once items are found. Called with (*{@link InMemoryEntity}[]* `entities`).\n\t */\n\tfindMany( table, queryFind, options = {}) {\n\t\tconst storeTable = this.ensureCollectionExists( table );\n\t\tconst matches = _.filter( storeTable.items, _.partial( this.matchEntity, queryFind ));\n\t\tconst reducedMatches = this.constructor.applyOptionsToSet( matches, options );\n\t\treturn Promise.resolve( _.map( reducedMatches, entity => new this.classEntity( entity, this )));\n\t}\n\n\t// -----\n\t// ### Update\n\n\t/**\n\t * Update a single entity in the memory.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#updateOne}, modified for in-memory interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to update data in.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once update is done. Called with (*{@link InMemoryEntity}* `entity`).\n\t */\n\tupdateOne( table, queryFind, update, options = {}) {\n\t\treturn this.findOne( table, queryFind, options ).then( found => {\n\t\t\tif ( !_.isNil( found )) {\n\t\t\t\tconst storeTable = this.ensureCollectionExists( table );\n\t\t\t\tconst match = _.find( storeTable.items, {\n\t\t\t\t\tid: found.id,\n\t\t\t\t});\n\t\t\t\tthis.applyUpdateEntity( update, match );\n\t\t\t\treturn Promise.resolve( new this.classEntity( match, this ));\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Update several entities in the memory.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#updateMany}, modified for in-memory interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to update data in.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once update is done. Called with (*{@link InMemoryEntity}[]* `entities`).\n\t */\n\tupdateMany( table, queryFind, update, options = {}) {\n\t\treturn this.findMany( table, queryFind, options ).then( found => {\n\t\t\tif ( !_.isNil( found ) && found.length > 0 ) {\n\t\t\t\tconst storeTable = this.ensureCollectionExists( table );\n\t\t\t\tconst foundIds = _.map( found, 'id' );\n\t\t\t\tconst matches = _.filter( storeTable.items, item => -1 !== foundIds.indexOf( item.id ));\n\t\t\t\treturn Promise.resolve( _.map( matches, item => {\n\t\t\t\t\tthis.applyUpdateEntity( update, item );\n\t\t\t\t\treturn new this.classEntity( item, this );\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t});\n\t}\n\n\t// -----\n\t// ### Delete\n\n\t/**\n\t * Delete a single entity from the memory.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteOne}, modified for in-memory interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*undefined*).\n\t */\n\tdeleteOne( table, queryFind, options = {}) {\n\t\tconst storeTable = this.ensureCollectionExists( table );\n\t\treturn this.findOne( table, queryFind, options ).then( entityToDelete => {\n\t\t\tstoreTable.items = _.reject( storeTable.items, entity => entity.id === entityToDelete.idHash[this.name]);\n\t\t\treturn Promise.resolve();\n\t\t});\n\t}\n\n\t/**\n\t * Delete several entities from the memory.\n\t * \n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteMany}, modified for in-memory interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once items are deleted. Called with (*undefined*).\n\t */\n\tdeleteMany( table, queryFind, options = {}) {\n\t\tconst storeTable = this.ensureCollectionExists( table );\n\t\treturn this.findMany( table, queryFind, options ).then( entitiesToDelete => {\n\t\t\tconst entitiesIds = _.map( entitiesToDelete, entity => _.get( entity, `idHash.${ this.name }` ));\n\t\t\tstoreTable.items = _.reject( storeTable.items, entity => {\n\t\t\t\treturn _.includes( entitiesIds, entity.id );\n\t\t\t});\n\t\t\treturn Promise.resolve();\n\t\t});\n\t}\n}\n\nmodule.exports = InMemoryDiasporaAdapter;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../dataStoreEntities/inMemoryEntity.js\":7,\"../dependencies\":8,\"./baseAdapter.js\":2}],5:[function(require,module,exports){\n'use strict';\n\nconst {\n\t_,\n} = require( '../dependencies' );\n\n/**\n * @namespace DataStoreEntities\n */\n\n/**\n * DataStoreEntity is the sub-entity reflecting a single source content. Values may differ from the Entity itself.\n * @memberof DataStoreEntities\n */\nclass DataStoreEntity {\n\t/**\n\t * Construct a new data source entity with specified content & parent.\n\t * \n\t * @author gerkin\n\t * @param {Object}                   entity     - Object containing attributes to inject in this entity. The only **reserved key** is `dataSource`.\n\t * @param {Adapters.DiasporaAdapter} dataSource - Adapter that spawn this entity.\n\t */\n\tconstructor( entity, dataSource ) {\n\t\tif ( _.isNil( entity )) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif ( _.isNil( dataSource )) {\n\t\t\tthrow new TypeError( `Expect 2nd argument to be the parent of this entity, have \"${ dataSource }\"` );\n\t\t}\n\t\tObject.defineProperties( this, {\n\t\t\tdataSource: {\n\t\t\t\tvalue:        dataSource,\n\t\t\t\tenumerable:   false,\n\t\t\t\tconfigurable: false,\n\t\t\t},\n\t\t});\n\t\t_.assign( this, entity );\n\t}\n\t\n\t/**\n\t * Returns a plain object corresponding to this entity attributes.\n\t * \n\t * @author gerkin\n\t * @returns {Object} Plain object representing this entity.\n\t */\n\ttoObject() {\n\t\treturn _.omit( this, [ 'dataSource', 'id' ]);\n\t}\n}\n\nmodule.exports = DataStoreEntity;\n\n},{\"../dependencies\":8}],6:[function(require,module,exports){\n'use strict';\n\nconst DataStoreEntity = require( './baseEntity.js' );\n\n/**\n * Entity stored in {@link Adapters.BrowserStorageDiasporaAdapter the local storage adapter}.\n * \n * @extends DataStoreEntities.DataStoreEntity\n * @memberof DataStoreEntities\n */\nclass BrowserStorageEntity extends DataStoreEntity {\n\t/**\n\t * Construct a local storage entity with specified content & parent.\n\t * \n\t * @author gerkin\n\t * @param {Object}                   entity     - Object containing attributes to inject in this entity. The only **reserved key** is `dataSource`.\n\t * @param {Adapters.DiasporaAdapter} dataSource - Adapter that spawn this entity.\n\t */\n\tconstructor( entity, dataSource ) {\n\t\tsuper( entity, dataSource );\n\t}\n}\n\nmodule.exports = BrowserStorageEntity;\n\n},{\"./baseEntity.js\":5}],7:[function(require,module,exports){\n'use strict';\n\nconst DataStoreEntity = require( './baseEntity.js' );\n\n/**\n * Entity stored in {@link Adapters.InMemoryDiasporaAdapter the in-memory adapter}.\n * @extends DataStoreEntities.DataStoreEntity\n * @memberof DataStoreEntities\n */\nclass InMemoryEntity extends DataStoreEntity {\n\t/**\n\t * Construct a in memory entity with specified content & parent.\n\t * \n\t * @author gerkin\n\t * @param {Object}                   entity     - Object containing attributes to inject in this entity. The only **reserved key** is `dataSource`.\n\t * @param {Adapters.DiasporaAdapter} dataSource - Adapter that spawn this entity.\n\t */\n\tconstructor( entity, dataSource ) {\n\t\tsuper( entity, dataSource );\n\t}\n}\n\nmodule.exports = InMemoryEntity;\n\n},{\"./baseEntity.js\":5}],8:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = {\n\t_: (() => { \n\t\treturn global._ || require( 'lodash' );\n\t})(),\n\tSequentialEvent: (() => { \n\t\treturn global.SequentialEvent || require( 'sequential-event' );\n\t})(),\n\tPromise: (() => { \n\t\treturn global.Promise && global.Promise.version ? global.Promise : require( 'bluebird' );\n\t})(),\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"bluebird\":undefined,\"lodash\":undefined,\"sequential-event\":undefined}],9:[function(require,module,exports){\n(function (process){\n'use strict';\n\nconst dependencies = require( './dependencies' );\nconst {\n\t_, Promise,\n} = dependencies;\n\nconst adapters = {};\nconst dataSources = {};\nconst models = {};\n\nconst wrapDataSourceAction = ( callback, queryType, adapter ) => {\n\treturn ( table, ...args ) => {\n\t\t// Filter our results\n\t\tconst filterResults = entity => {\n\t\t\t// Remap fields\n\t\t\tentity = adapter.remapFields( table, entity, true );\n\t\t\t// Force results to be class instances\n\t\t\tif ( !( entity instanceof adapter.classEntity ) && !_.isNil( entity )) {\n\t\t\t\treturn new adapter.classEntity( entity, adapter );\n\t\t\t}\n\t\t\treturn entity;\n\t\t};\n\n\t\t// Transform arguments for find, update & delete\n\t\tlet optIndex = false;\n\t\tlet upd = false;\n\t\tif ([ 'find', 'delete' ].indexOf( queryType.query ) >= 0 ) {\n\t\t\t// For find & delete, options are 3rd argument (so 2nd item in `args`)\n\t\t\toptIndex = 1;\n\t\t} else if ( 'update' === queryType.query ) {\n\t\t\t// For update, options are 4th argument (so 3nd item in `args`), and `upd` flag is toggled on.\n\t\t\toptIndex = 2;\n\t\t\tupd = true;\n\t\t}\n\t\ttry {\n\t\t\t//console.log('Before query transformed', args[0]);\n\t\t\tif ( false !== optIndex ) {\n\t\t\t\t// Options to canonical\n\t\t\t\targs[optIndex] = adapter.normalizeOptions( args[optIndex]);\n\t\t\t\t// Remap input objects\n\t\t\t\tif ( true === args[optIndex].remapInput ) {\n\t\t\t\t\targs[0] = adapter.remapFields( table, args[0], false );\n\n\t\t\t\t\tif ( true === upd ) {\n\t\t\t\t\t\targs[1] = adapter.remapFields( table, args[1], false );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Query search to cannonical\n\t\t\t\targs[0] = adapter.normalizeQuery( args[0], args[optIndex]);\n\t\t\t\targs[optIndex].remapInput = false;\n\t\t\t} else if ( 'insert' === queryType.query ) {\n\t\t\t\t// If inserting, then, we'll need to know if we are inserting *several* entities or a *single* one.\n\t\t\t\tif ( 'many' === queryType.number ) {\n\t\t\t\t\t// If inserting *several* entities, map the array to remap each entity objects...\n\t\t\t\t\targs[0] = _.map( args[0], insertion => adapter.remapFields( table, insertion, false ));\n\t\t\t\t} else {\n\t\t\t\t\t// ... or we are inserting a *single* one. We still need to remap entity.\n\t\t\t\t\targs[0] = adapter.remapFields( table, args[0], false );\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log('Query transformed:', args[0]);\n\t\t} catch ( err ) {\n\t\t\treturn Promise.reject( err );\n\t\t}\n\n\t\t// Hook after promise resolution\n\t\tconst queryPromise = callback.call( adapter, table, ...args );\n\t\treturn queryPromise.then( results => {\n\t\t\tif ( _.isArrayLike( results )) {\n\t\t\t\tresults = _.map( results, filterResults );\n\t\t\t} else if ( !_.isNil( results )) {\n\t\t\t\tresults = filterResults( results );\n\t\t\t}\n\t\t\treturn Promise.resolve( results );\n\t\t});\n\t};\n};\n\n/**\n * Diaspora main namespace\n * @namespace Diaspora\n * @public\n * @author gerkin\n */\nconst Diaspora = {\n\t/**\n\t * Check if the value matches the field description provided, thus verify if it is valid.\n\t * \n\t * @author gerkin\n\t * @param   {Object}                               entity    - Entity to check.\n\t * @param   {module:ModelExtension.ModelPrototype} modelDesc - Model description.\n\t * @returns {Error[]} Array of errors.\n\t */\n\tcheck( entity, modelDesc = {}) {\n\t\t// Apply method `checkField` on each field described\n\t\tconst checkResults = _( modelDesc )\n\t\t\t.mapValues(( fieldDesc, field ) => this.checkField.call( this, entity[field], fieldDesc, _.concat([], [ field ])))\n\t\t\t.omitBy( _.isEmpty )\n\t\t\t.value();\n\t\treturn checkResults;\n\t},\n\n\t/**\n\t * Check if the value matches the field description provided, thus verify if it is valid.\n\t * \n\t * @author gerkin\n\t * @param   {Any}                                   value     - Value to check.\n\t * @param   {module:ModelExtension.FieldDescriptor} fieldDesc - Description of the field to check with.\n\t * @param   {String[]}                              keys      - Array of keys from highest ancestor to this property.\n\t * @returns {Object} Hash describing errors.\n\t */\n\tcheckField( value, fieldDesc, keys ) {\n\t\tif ( !_.isObject( fieldDesc )) {\n\t\t\treturn;\n\t\t}\n\t\t_.defaults( fieldDesc, {\n\t\t\trequired: false,\n\t\t});\n\n\t\tconst error = {};\n\n\t\t// It the field has a `validate` property, try to use it\n\t\tif ( fieldDesc.validate ) {\n\t\t\tif ( !fieldDesc.validate.call( this, value, fieldDesc )) {\n\t\t\t\terror.validate = `${ keys.join( '.' ) } custom validation failed`;\n\t\t\t}\n\t\t}\n\n\t\t// Check the type and the required status\n\t\tif ( !_.isNil( fieldDesc.type ) && !_.isNil( fieldDesc.model )) {\n\t\t\terror.spec =  `${ keys.join( '.' ) } spec can't have both a type and a model`;\n\t\t\t// Apply the `required` modifier\n\t\t} else if ( true === fieldDesc.required && _.isNil( value )) {\n\t\t\terror.required = `${ keys.join( '.' ) } is a required property of type \"${ fieldDesc.type }\"`;\n\t\t} else if ( !_.isNil( value )) {\n\t\t\tif ( _.isString( fieldDesc.type )) {\n\t\t\t\tswitch ( fieldDesc.type ) {\n\t\t\t\t\tcase 'string': {\n\t\t\t\t\t\tif ( !_.isString( value )) {\n\t\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } expected to be a \"${ fieldDesc.type }\"`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\n\t\t\t\t\tcase 'integer': {\n\t\t\t\t\t\tif ( !_.isInteger( value )) {\n\t\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } expected to be a \"${ fieldDesc.type }\"`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\n\t\t\t\t\tcase 'float': {\n\t\t\t\t\t\tif ( !_.isNumber( value )) {\n\t\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } expected to be a \"${ fieldDesc.type }\"`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\n\t\t\t\t\tcase 'date': {\n\t\t\t\t\t\tif ( !_.isDate( value )) {\n\t\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } expected to be a \"${ fieldDesc.type }\"`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\n\t\t\t\t\tcase 'object': {\n\t\t\t\t\t\tif ( !_.isObject( value )) {\n\t\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } expected to be a \"${ fieldDesc.type }\"`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst deepTest = _.isObject( \n\t\t\t\t\t\t\t\tfieldDesc.attributes \n\t\t\t\t\t\t\t) ? _( value ).mapValues( \n\t\t\t\t\t\t\t\t\t( propVal, propName ) => this.checkField( \n\t\t\t\t\t\t\t\t\t\tpropVal, \n\t\t\t\t\t\t\t\t\t\tfieldDesc.attributes[propName], \n\t\t\t\t\t\t\t\t\t\t_.concat( keys, [ propName ]) \n\t\t\t\t\t\t\t\t\t) \n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.omitBy( _.isEmpty )\n\t\t\t\t\t\t\t\t\t.value() : {};\n\t\t\t\t\t\t\tif ( !_.isEmpty( deepTest )) {\n\t\t\t\t\t\t\t\terror.children = deepTest;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\n\t\t\t\t\tcase 'array': {\n\t\t\t\t\t\tif ( !_.isArray( value )) {\n\t\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } expected to be a \"${ fieldDesc.type }\"`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst deepTest = _.isObject( \n\t\t\t\t\t\t\t\tfieldDesc.of \n\t\t\t\t\t\t\t) ? _( value ).map( \n\t\t\t\t\t\t\t\t\t( propVal, propName ) => { \n\t\t\t\t\t\t\t\t\t\tif ( _.isArrayLike( fieldDesc.of )) { \n\t\t\t\t\t\t\t\t\t\t\tconst subErrors = _( fieldDesc.of ).map( desc => this.checkField( propVal, desc, _.concat( keys, [ propName ]))); \n\t\t\t\t\t\t\t\t\t\t\tif ( !_.find( subErrors, v => 0 === v.length )) { \n\t\t\t\t\t\t\t\t\t\t\t\treturn subErrors; \n\t\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\t\t\t\treturn this.checkField( propVal, fieldDesc.of, _.concat( keys, [ propName ])); \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.omitBy( _.isEmpty )\n\t\t\t\t\t\t\t\t\t.value() : {};\n\t\t\t\t\t\t\tif ( !_.isEmpty( deepTest )) {\n\t\t\t\t\t\t\t\terror.children = deepTest;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\n\t\t\t\t\tcase 'any': {\n\t\t\t\t\t\tif ( !_.stubTrue( value )) {\n\t\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } expected to be assigned with any type`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\terror.type =  `${ keys.join( '.' ) } requires to be unhandled type \"${ fieldDesc.type }\"`;\n\t\t\t\t\t} break;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terror.spec =  `${ keys.join( '.' ) } spec \"type\" must be a string`;\n\t\t\t}\n\t\t}\n\n\t\t// Check enum values\n\t\tif ( !_.isNil( fieldDesc.enum )) {\n\t\t\tconst result = _.some( fieldDesc.enum, enumVal => {\n\t\t\t\tif ( enumVal instanceof RegExp ) {\n\t\t\t\t\treturn null !== value.match( enumVal );\n\t\t\t\t} else {\n\t\t\t\t\treturn value === enumVal;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif ( false === result ) {\n\t\t\t\terror.enum = `${ keys.join( '.' ) } expected to have one of enumerated values \"${ JSON.stringify( fieldDesc.enum ) }\"`;\n\t\t\t}\n\t\t}\n\t\tif ( !_.isEmpty( error )) {\n\t\t\terror.value = value;\n\t\t\treturn error;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t},\n\n\t/**\n\t * Set default values if required.\n\t * \n\t * @author gerkin\n\t * @param   {Object}         entity    - Entity to set defaults in.\n\t * @param   {ModelPrototype} modelDesc - Model description.\n\t * @returns {Object} Entity merged with default values.\n\t */\n\tdefault( entity, modelDesc ) {\n\t\t// Apply method `defaultField` on each field described\n\t\treturn _.defaults(\n\t\t\tentity,\n\t\t\t_.mapValues(\n\t\t\t\tmodelDesc,\n\t\t\t\t( fieldDesc, field ) => this.defaultField(\n\t\t\t\t\tentity[field],\n\t\t\t\t\tfieldDesc\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t},\n\n\t/**\n\t * Set the default on a single field according to its description.\n\t * \n\t * @author gerkin\n\t * @param   {Any}             value     - Value to default.\n\t * @param   {FieldDescriptor} fieldDesc - Description of the field to default.\n\t * @returns {Any} Defaulted value.\n\t */\n\tdefaultField( value, fieldDesc ) {\n\t\tlet out;\n\t\tif ( !_.isUndefined( value )) {\n\t\t\tout = value;\n\t\t} else {\n\t\t\tout = _.isFunction( fieldDesc.default ) ? fieldDesc.default() : fieldDesc.default;\n\t\t}\n\t\tif ( 'object' === fieldDesc.type && _.isObject( fieldDesc.attributes ) && _.keys( fieldDesc.attributes ).length > 0 && !_.isNil( out )) {\n\t\t\treturn this.default( out, fieldDesc.attributes );\n\t\t} else {\n\t\t\treturn out;\n\t\t}\n\t},\n\n\t/**\n\t * Create a data source (usually, a database connection) that may be used by models.\n\t * \n\t * @author gerkin\n\t * @throws  {Error} Thrown if provided `adapter` label does not correspond to any adapter registered.\n\t * @param   {string} adapterLabel - Label of the adapter used to create the data source.\n\t * @param   {Object} config       - Configuration hash. This configuration hash depends on the adapter we want to use.\n\t * @returns {Adapters.DiasporaAdapter} New adapter spawned.\n\t */\n\tcreateDataSource( adapterLabel, config ) {\n\t\tif ( !adapters.hasOwnProperty( adapterLabel )) {\n\t\t\tthrow new Error( `Unknown adapter \"${ adapterLabel }\". Available currently are ${ Object.keys( adapters ).join( ', ' ) }` );\n\t\t}\n\t\tconst baseAdapter = new adapters[adapterLabel]( config );\n\t\tconst newDataSource = new Proxy( baseAdapter, {\n\t\t\tget( target, key ) {\n\t\t\t\t// If this is an adapter action method, wrap it with filters. Our method keys are only string, not tags\n\t\t\t\tif ( _.isString( key )) {\n\t\t\t\t\tlet method = key.match( /^(find|update|insert|delete)(Many|One)$/ );\n\t\t\t\t\tif ( null !== method ) {\n\t\t\t\t\t\tmethod[2] = method[2].toLowerCase();\n\t\t\t\t\t\tmethod = _.mapKeys( method.slice( 0, 3 ), ( val, key ) => {\n\t\t\t\t\t\t\treturn [ 'full', 'query', 'number' ][key];\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn wrapDataSourceAction( target[key], method, target );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn target[key];\n\t\t\t},\n\t\t});\n\t\treturn newDataSource;\n\t},\n\n\t/**\n\t * Stores the data source with provided label.\n\t * \n\t * @author gerkin\n\t * @throws  {Error} Error is thrown if parameters are incorrect or the name is already used or `dataSource` is not an adapter.\n\t * @param   {string}          name       - Name associated with this datasource.\n\t * @param   {DiasporaAdapter} dataSource - Datasource itself.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tregisterDataSource( name, dataSource ) {\n\t\tif ( !_.isString( name ) && name.length > 0 ) {\n\t\t\tthrow new Error( `DataSource name must be a non empty string, had \"${ name }\"` );\n\t\t}\n\t\tif ( dataSources.hasOwnProperty( name )) {\n\t\t\tthrow new Error( `DataSource name already used, had \"${ name }\"` );\n\t\t}\n\t\tif ( !( dataSource instanceof Diaspora.components.DiasporaAdapter )) {\n\t\t\tthrow new Error( 'DataSource must be an instance inheriting \"DiasporaAdapter\"' );\n\t\t}\n\t\tdataSource.name = name;\n\t\t_.merge( dataSources, {\n\t\t\t[name]: dataSource,\n\t\t});\n\t},\n\n\t/**\n\t * Create a data source (usually, a database connection) that may be used by models.\n\t * \n\t * @author gerkin\n\t * @throws  {Error} Thrown if provided `adapter` label does not correspond to any adapter registered.\n\t * @param   {string} name         - Name associated with this datasource.\n\t * @param   {string} adapterLabel - Label of the adapter used to create the data source.\n\t * @param   {Object} config       - Configuration hash. This configuration hash depends on the adapter we want to use.\n\t * @returns {Adapters.DiasporaAdapter} New adapter spawned.\n\t */\n\tcreateNamedDataSource( name, adapterLabel, config ) {\n\t\tconst dataSource = Diaspora.createDataSource( adapterLabel, config );\n\t\tDiaspora.registerDataSource( name, dataSource );\n\t},\n\n\t/**\n\t * Create a new Model with provided description.\n\t * \n\t * @author gerkin\n\t * @throws  {Error} Thrown if parameters are incorrect.\n\t * @param   {string} name      - Name associated with this datasource.\n\t * @param   {Object} modelDesc - Description of the model to define.\n\t * @returns {Model} Model created.\n\t */\n\tdeclareModel( name, modelDesc ) {\n\t\tif ( !_.isString( name ) && name.length > 0 ) {\n\t\t\tthrow new Error( `DataSource name must be a non empty string, had \"${ name }\"` );\n\t\t}\n\t\tif ( !_.isObject( modelDesc )) {\n\t\t\tthrow new Error( '\"modelDesc\" must be an object' );\n\t\t}\n\t\tconst model = new Diaspora.components.Model( name, modelDesc );\n\t\t_.assign( models, {\n\t\t\t[name]: model,\n\t\t});\n\t\treturn model;\n\t},\n\n\t/**\n\t * Register a new adapter and make it available to use by models.\n\t * \n\t * @author gerkin\n\t * @throws  {Error} Thrown if an adapter already exists with same label.\n\t * @throws  {TypeError} Thrown if adapter does not extends {@link Adapters.DiasporaAdapter}.\n\t * @param   {string}                   label   - Label of the adapter to register.\n\t * @param   {Adapters.DiasporaAdapter} adapter - The adapter to register.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tregisterAdapter( label, adapter ) {\n\t\tif ( adapters[label]) {\n\t\t\tthrow new Error( `Adapter with label \"${ label }\" already exists.` );\n\t\t}\n\t\t// Check inheritance of adapter\n\t\tif ( !( adapter.prototype instanceof Diaspora.components.DiasporaAdapter )) {\n\t\t\tthrow new TypeError( `Trying to register an adapter with label \"${ label }\", but it does not extends DiasporaAdapter.` );\n\t\t}\n\t\tadapters[label] = adapter;\n\t},\n\n\t/**\n\t * Hash containing all available models.\n\t * \n\t * @type {Object}\n\t * @property {Model} * - Model associated with that name.\n\t * @memberof Diaspora\n\t * @public\n\t * @author gerkin\n\t * @see Use {@link Diaspora.declareModel} to add models.\n\t */\n\tmodels,\n\t/**\n\t * Hash containing all available data sources.\n\t * \n\t * @type {Object}\n\t * @property {Adapters.DiasporaAdapter} * - Instances of adapters declared.\n\t * @memberof Diaspora\n\t * @private\n\t * @author gerkin\n\t * @see Use {@link Diaspora.createNamedDataSource} or {@link Diaspora.registerDataSource} to make data sources available for models.\n\t */\n\tdataSources,\n\t/**\n\t * Hash containing all available adapters. The only universal adapter is `inMemory`.\n\t * \n\t * @type {Object}\n\t * @property {Adapters.DiasporaAdapter}        *        - Adapter constructor. Those constructors must be subclasses of DiasporaAdapter.\n\t * @property {Adapters.InMemorDiasporaAdapter} inMemory - InMemoryDiasporaAdapter constructor.\n\t * @memberof Diaspora\n\t * @private\n\t * @author gerkin\n\t * @see Use {@link Diaspora.registerAdapter} to add adapters.\n\t */\n\tadapters,\n\t/**\n\t * Dependencies of Diaspora.\n\t * \n\t * @type {Object}\n\t * @property {Bluebird}        Promise          - Bluebird lib.\n\t * @property {Lodash}          _                - Lodash lib.\n\t * @property {SequentialEvent} sequential-event - SequentialEvent lib.\n\t * @memberof Diaspora\n\t * @private\n\t * @author gerkin\n\t */\n\tdependencies: dependencies,\n};\n\nmodule.exports = Diaspora;\n\n// Load components after export, so requires of Diaspora returns a complete object\n/**\n * Hash of components exposed by Diaspora.\n * \n * @type {Object}\n * @memberof Diaspora\n * @private\n * @author gerkin\n */\nDiaspora.components = {\n\tEntity:          require( './entityFactory' )( null, {}, null ),\n\tSet:             require( './set' ),\n\tModel:           require( './model' ),\n\tValidationError: require( './validationError' ),\n\tDiasporaAdapter: require( './adapters/baseAdapter' ),\n\tDataStoreEntity: require( './dataStoreEntities/baseEntity' ),\n};\n\n// Register available built-in adapters\nDiaspora.registerAdapter( 'inMemory', require( './adapters/inMemoryAdapter' ));\n// Register browserStorage only if in browser\nif ( process.browser ) {\n\tDiaspora.registerAdapter( 'browserStorage', require( './adapters/browserStorageAdapter' ));\n}\n\n}).call(this,require('_process'))\n},{\"./adapters/baseAdapter\":2,\"./adapters/browserStorageAdapter\":3,\"./adapters/inMemoryAdapter\":4,\"./dataStoreEntities/baseEntity\":5,\"./dependencies\":8,\"./entityFactory\":10,\"./model\":11,\"./set\":12,\"./validationError\":14,\"_process\":15}],10:[function(require,module,exports){\n'use strict';\n\nconst {\n\t_, Promise, SequentialEvent,\n} = require( './dependencies' );\nconst Diaspora = require( './diaspora' );\nconst DataStoreEntity = require( './dataStoreEntities/baseEntity' );\nconst ValidationError = require( './validationError' );\nconst Utils = require( './utils' );\n\n/**\n * @namespace EntityFactory\n */\n\n/**\n * This factory function generate a new class constructor, prepared for a specific model.\n * \n * @memberof EntityFactory\n * @param   {string} name       - Name of this model.\n * @param   {Object} modelAttrs - Object describing a model.\n * @param   {Model}  model      - Model that will spawn entities.\n * @returns {Entity} Entity constructor to use with this model.\n */\nfunction EntityFactory( name, modelAttrs, model ) {\n\tconst modelAttrsKeys = _.keys( modelAttrs );\n\n\t/**\n\t * The entity is the class you use to manage a single document in all data sources managed by your model. \n\t * > Note that this class is proxied: you may try to access to undocumented class properties to get entity's data attributes\n\t * @summary An entity is a document in the population of all your datas of the same type\n\t * @extends SequentialEvent\n\t * @memberof EntityFactory\n\t */\n\tclass Entity extends SequentialEvent {\n\t\t/**\n\t\t * Create a new entity.\n\t\t * \n\t\t * @author gerkin\n\t\t * @param {Object|DataStoreEntities.DataStoreEntity} [source={}] - Hash with properties to copy on the new object.  \n\t\t *        If provided object inherits DataStoreEntity, the constructed entity is built in `sync` state.\n\t\t */\n\t\tconstructor( source = {}) {\n\t\t\tsuper();\n\n\t\t\t// Stores the object state\n\t\t\tlet state = 'orphan';\n\t\t\tlet lastDataSource = null;\n\t\t\tconst dataSources = Object.seal( _.mapValues( model.dataSources, () => undefined ));\n\n\t\t\tconst entityPrototype = {\n\t\t\t\t/**\n\t\t\t\t * Hash that links each data source with its name. This object is prepared with keys from model sources, and sealed.\n\t\t\t\t * \n\t\t\t\t * @name dataSources\n\t\t\t\t * @readonly\n\t\t\t\t * @type {Object}\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @author gerkin\n\t\t\t\t */\n\t\t\t\tdataSources: {\n\t\t\t\t\tvalue: dataSources,\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Returns a copy of this entity attributes.\n\t\t\t\t * \n\t\t\t\t * @method toObject\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @author gerkin\n\t\t\t\t * @returns {Object} Attributes of this entity.\n\t\t\t\t */\n\t\t\t\ttoObject: () => {\n\t\t\t\t\treturn _.omit( attributes, entityPrototypeProperties ); \n\t\t\t\t}, \n\t\t\t\t/**\n\t\t\t\t * Save this entity in specified data source.\n\t\t\t\t * \n\t\t\t\t * @method persist\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @fires EntityFactory.Entity#beforeUpdate\n\t\t\t\t * @fires EntityFactory.Entity#afterUpdate\n\t\t\t\t * @author gerkin\n\t\t\t\t * @param   {string}  sourceName                 - Name of the data source to persist entity in.\n\t\t\t\t * @param   {Object}  [options]                  - Hash of options for this query. You should not use this parameter yourself: Diaspora uses it internally.\n\t\t\t\t * @param   {boolean} [options.skipEvents=false] - If true, won't trigger events `beforeUpdate` and `afterUpdate`.\n\t\t\t\t * @returns {Promise} Promise resolved once entity is saved. Resolved with `this`.\n\t\t\t\t */\n\t\t\t\tpersist: ( sourceName, options = {}) => {\n\t\t\t\t\t_.defaults( options, {\n\t\t\t\t\t\tskipEvents: false,\n\t\t\t\t\t});\n\t\t\t\t\tconst dataSource = this.constructor.model.getDataSource( sourceName );\n\t\t\t\t\tconst beforeState = state;\n\t\t\t\t\tstate = 'syncing';\n\t\t\t\t\tlet promise;\n\t\t\t\t\tif ( options.skipEvents ) {\n\t\t\t\t\t\tpromise = Promise.resolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpromise = this.emit( 'beforeUpdate', sourceName );\n\t\t\t\t\t}\n\t\t\t\t\treturn promise.then(() => {\n\t\t\t\t\t\tlastDataSource = dataSource.name;\n\t\t\t\t\t\t// Depending on state, we are going to perform a different operation\n\t\t\t\t\t\tif ( 'orphan' === beforeState ) {\n\t\t\t\t\t\t\treturn dataSource.insertOne( this.table( sourceName ), this.toObject());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn dataSource.updateOne( this.table( sourceName ), this.uidQuery( dataSource ), this.toObject());\n\t\t\t\t\t\t}\n\t\t\t\t\t}).then( dataStoreEntity => {\n\t\t\t\t\t\tstate = 'sync';\n\t\t\t\t\t\tentityDefined.dataSources[dataSource.name] = dataStoreEntity;\n\t\t\t\t\t\tattributes = dataStoreEntity.toObject();\n\t\t\t\t\t\tif ( options.skipEvents ) {\n\t\t\t\t\t\t\treturn  Promise.resolve( entityProxied );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.emit( 'afterUpdate', sourceName ).then(() => Promise.resolve( entityProxied ));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Reload this entity from specified data source.\n\t\t\t\t * \n\t\t\t\t * @method fetch\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @fires EntityFactory.Entity#beforeFind\n\t\t\t\t * @fires EntityFactory.Entity#afterFind\n\t\t\t\t * @author gerkin\n\t\t\t\t * @param   {string}  sourceName                 - Name of the data source to fetch entity from.\n\t\t\t\t * @param   {Object}  [options]                  - Hash of options for this query. You should not use this parameter yourself: Diaspora uses it internally.\n\t\t\t\t * @param   {boolean} [options.skipEvents=false] - If true, won't trigger events `beforeFind` and `afterFind`.\n\t\t\t\t * @returns {Promise} Promise resolved once entity is reloaded. Resolved with `this`.\n\t\t\t\t */\n\t\t\t\tfetch: ( sourceName, options = {}) => {\n\t\t\t\t\t_.defaults( options, {\n\t\t\t\t\t\tskipEvents: false,\n\t\t\t\t\t});\n\t\t\t\t\tconst dataSource = this.constructor.model.getDataSource( sourceName );\n\t\t\t\t\tconst beforeState = state;\n\t\t\t\t\tstate = 'syncing';\n\t\t\t\t\tlet promise;\n\t\t\t\t\tif ( options.skipEvents ) {\n\t\t\t\t\t\tpromise = Promise.resolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpromise = this.emit( 'beforeFind', sourceName );\n\t\t\t\t\t}\n\t\t\t\t\treturn promise.then(() => {\n\t\t\t\t\t\t// Depending on state, we are going to perform a different operation\n\t\t\t\t\t\tif ( 'orphan' === beforeState ) {\n\t\t\t\t\t\t\treturn Promise.reject( 'Can\\'t fetch an orphan entity' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlastDataSource = dataSource.name;\n\t\t\t\t\t\t\treturn dataSource.findOne( this.table( sourceName ), this.uidQuery( dataSource ));\n\t\t\t\t\t\t}\n\t\t\t\t\t}).then( dataStoreEntity => {\n\t\t\t\t\t\tstate = 'sync';\n\t\t\t\t\t\tentityDefined.dataSources[dataSource.name] = dataStoreEntity;\n\t\t\t\t\t\tattributes = dataStoreEntity.toObject();\n\t\t\t\t\t\tif ( options.skipEvents ) {\n\t\t\t\t\t\t\treturn  Promise.resolve( entityProxied );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.emit( 'afterFind', sourceName ).then(() => Promise.resolve( entityProxied ));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Delete this entity from the specified data source.\n\t\t\t\t * \n\t\t\t\t * @method destroy\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @fires EntityFactory.Entity#beforeDelete\n\t\t\t\t * @fires EntityFactory.Entity#afterDelete\n\t\t\t\t * @author gerkin\n\t\t\t\t * @param   {string}  sourceName                 - Name of the data source to delete entity from.\n\t\t\t\t * @param   {Object}  [options]                  - Hash of options for this query. You should not use this parameter yourself: Diaspora uses it internally.\n\t\t\t\t * @param   {boolean} [options.skipEvents=false] - If true, won't trigger events `beforeDelete` and `afterDelete`.\n\t\t\t\t * @returns {Promise} Promise resolved once entity is destroyed. Resolved with `this`.\n\t\t\t\t */\n\t\t\t\tdestroy: ( sourceName, options = {}) => {\n\t\t\t\t\t_.defaults( options, {\n\t\t\t\t\t\tskipEvents: false,\n\t\t\t\t\t});\n\t\t\t\t\tconst dataSource = this.constructor.model.getDataSource( sourceName );\n\t\t\t\t\tconst beforeState = state;\n\t\t\t\t\tstate = 'syncing';\n\t\t\t\t\tlet promise;\n\t\t\t\t\tif ( options.skipEvents ) {\n\t\t\t\t\t\tpromise = Promise.resolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpromise = this.emit( 'beforeDelete', sourceName );\n\t\t\t\t\t}\n\t\t\t\t\treturn promise.then(() => {\n\t\t\t\t\t\tif ( 'orphan' === beforeState ) {\n\t\t\t\t\t\t\treturn Promise.reject( new Error( 'Can\\'t destroy an orphan entity' ));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlastDataSource = dataSource.name;\n\t\t\t\t\t\t\treturn dataSource.deleteOne( this.table( sourceName ), this.uidQuery( dataSource ));\n\t\t\t\t\t\t}\n\t\t\t\t\t}).then(() => {\n\t\t\t\t\t\t// If this was our only data source, then go back to orphan state\n\t\t\t\t\t\tif ( 0 === _.without( model.dataSources, dataSource.name ).length ) {\n\t\t\t\t\t\t\tstate = 'orphan';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate = 'sync';\n\t\t\t\t\t\t\tdelete attributes.idHash[dataSource.name];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tentityDefined.dataSources[dataSource.name] = undefined;\n\t\t\t\t\t\tif ( options.skipEvents ) {\n\t\t\t\t\t\t\treturn  Promise.resolve( entityProxied );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.emit( 'afterDelete', sourceName ).then(() => Promise.resolve( entityProxied ));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Get entity's current state.\n\t\t\t\t * \n\t\t\t\t * @name dataSources\n\t\t\t\t * @readonly\n\t\t\t\t * @type {Entity.State}\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @author gerkin\n\t\t\t\t */\n\t\t\t\tstate: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\treturn state; \n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Get entity's last data source.\n\t\t\t\t * \n\t\t\t\t * @name dataSources\n\t\t\t\t * @readonly\n\t\t\t\t * @type {null|string}\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @author gerkin\n\t\t\t\t */\n\t\t\t\tlastDataSource: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\treturn lastDataSource; \n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Generate the query to get this unique entity in the desired data source.\n\t\t\t\t * \n\t\t\t\t * @method uidQuery\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @author gerkin\n\t\t\t\t * @param   {Adapters.DiasporaAdapter} dataSource - Name of the data source to get query for.\n\t\t\t\t * @returns {Object} Query to find this entity.\n\t\t\t\t */\n\t\t\t\tuidQuery( dataSource ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: attributes.idHash[dataSource.name],\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Return the table of this entity in the specified data source.\n\t\t\t\t * \n\t\t\t\t * @method table\n\t\t\t\t * @memberof EntityFactory.Entity\n\t\t\t\t * @instance\n\t\t\t\t * @author gerkin\n\t\t\t\t * @returns {string} Name of the table.\n\t\t\t\t */\n\t\t\t\ttable( /*sourceName*/ ) {\n\t\t\t\t\t// Will be used later\n\t\t\t\t\treturn name;\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst entityPrototypeProperties = _.keys( entityPrototype );\n\n\t\t\t// If we construct our Entity from a datastore entity (that can happen internally in Diaspora), set it to `sync` state\n\t\t\tif ( source instanceof DataStoreEntity ) {\n\t\t\t\tstate = 'sync';\n\t\t\t\tlastDataSource = source.dataSource.name;\n\t\t\t\tdataSources[lastDataSource] = source;\n\t\t\t\tsource = _.omit( source.toObject(), [ 'id' ]);\n\t\t\t}\n\t\t\t// Check keys provided in source\n\t\t\tconst sourceKeys = _.keys( source );\n\t\t\t// Check if there is an intersection with reserved, and have differences with model attributes\n\t\t\tconst sourceUReserved = _.intersection( sourceKeys, entityPrototypeProperties );\n\t\t\tif ( 0 !== sourceUReserved.length ) {\n\t\t\t\tthrow new Error( `Source has reserved keys: ${ JSON.stringify( sourceUReserved ) } in ${ JSON.stringify( source ) }` );\n\t\t\t}\n\t\t\tconst sourceDModel = _.difference( source, modelAttrsKeys );\n\t\t\tif ( 0 !== sourceDModel.length ) { // Later, add a criteria for schemaless models\n\t\t\t\tthrow new Error( `Source has unknown keys: ${ JSON.stringify( sourceDModel ) } in ${ JSON.stringify( source ) }` );\n\t\t\t}\n\t\t\t// Now we know that the source is valid. First, deeply clone to detach object values from entity\n\t\t\tlet attributes = _.cloneDeep( source );\n\t\t\t// Free the source\n\t\t\tsource = null;\n\t\t\t// Default model attributes with our model desc\n\t\t\tDiaspora.default( attributes, modelAttrs );\n\n\t\t\t/**\n\t\t\t * Check if the entity matches model description.\n\t\t\t * \n\t\t\t * @method beforeUpdateValidate\n\t\t\t * @memberof EntityFactory.Entity\n\t\t\t * @inner\n\t\t\t * @listens EntityFactory.Entity#beforeUpdate\n\t\t\t * @author gerkin\n\t\t\t * @throws ValidationError Thrown if validation failed. This breaks event chain and prevent persistance.\n\t\t\t * @returns {undefined} This function does not return anything.\n\t\t\t * @see Diaspora.check\n\t\t\t */\n\t\t\tthis.on( 'beforeUpdate', () => {\n\t\t\t\tconst validationErrors = Diaspora.check( attributes, modelAttrs );\n\t\t\t\tif ( !_.isEmpty( validationErrors )) {\n\t\t\t\t\tthrow new ValidationError( validationErrors, 'Validation failed' );\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Define getters & setters\n\t\t\tconst entityDefined = Utils.defineEnumerableProperties( this, entityPrototype );\n\t\t\tconst entityProxied = new Proxy( entityDefined, {\n\t\t\t\tget: ( obj, key ) => {\n\t\t\t\t\tif ( 'constructor' === key ) {\n\t\t\t\t\t\treturn entityDefined[key];\n\t\t\t\t\t}\n\t\t\t\t\tif ( key in entityDefined ) {\n\t\t\t\t\t\treturn entityDefined[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn attributes[key];\n\t\t\t\t},\n\t\t\t\tset: ( obj, key, value ) => {\n\t\t\t\t\tif ( key in entityDefined && !super.hasOwnProperty( key )) {\n\t\t\t\t\t\tconsole.warn( `Trying to define read-only key ${ key }.` );\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\treturn attributes[key] = value;\n\t\t\t\t},\n\t\t\t\tenumerate: () => {\n\t\t\t\t\treturn _.keys( attributes );\n\t\t\t\t},\n\t\t\t\townKeys: () => {\n\t\t\t\t\treturn _( attributes ).keys().concat( entityPrototypeProperties ).value();\n\t\t\t\t},\n\t\t\t\thas: ( obj, key ) => {\n\t\t\t\t\treturn attributes.hasOwnProperty( key );\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn entityProxied;\n\t\t}\n\t}\n\tconst EntityWrapped = Object.defineProperties( Entity, {\n\t\t/**\n\t\t * Name of the class.\n\t\t * \n\t\t * @type {string}\n\t\t * @readonly\n\t\t * @memberof EntityFactory.Entity\n\t\t * @static\n\t\t * @author gerkin\n\t\t */\n\t\tname: {\n\t\t\tvalue:      `${ name  }Entity`,\n\t\t\twritable:   false,\n\t\t\tenumerable: true, \n\t\t},\n\t\t/**\n\t\t * Reference to this entity's model.\n\t\t * \n\t\t * @type {Model}\n\t\t * @readonly\n\t\t * @memberof EntityFactory.Entity\n\t\t * @static\n\t\t * @author gerkin\n\t\t */\n\t\tmodel: {\n\t\t\tvalue:      model,\n\t\t\twritable:   false,\n\t\t\tenumerable: true, \n\t\t},\n\t});\n\treturn EntityWrapped;\n}\n\n// -----\n// ### Events\n\n/**\n * Fired before updating this entity in the data source. Argument is the data source name to update\n * @event EntityFactory.Entity#beforeUpdate\n * @type {String}\n */\n\n/**\n * Fired after updating this entity in the data source. Argument is the data source name updated\n * @event EntityFactory.Entity#afterUpdate\n * @type {String}\n */\n\n/**\n * Fired before reloading this entity from the data source. Argument is the data source name to search in\n * @event EntityFactory.Entity#beforeFind\n * @type {String}\n */\n\n/**\n * Fired after reloading this entity from the data source. Argument is the data source name searched in\n * @event EntityFactory.Entity#afterFind\n * @type {String}\n */\n\n/**\n * Fired before deleting this entity from the data source. Argument is the data source name to delete from\n * @event EntityFactory.Entity#beforeDelete\n * @type {String}\n */\n\n/**\n * Fired after deleting this entity from the data source. Argument is the data source name deleted from\n * @event EntityFactory.Entity#afterDelete\n * @type {String}\n */\n\nmodule.exports = EntityFactory;\n\n},{\"./dataStoreEntities/baseEntity\":5,\"./dependencies\":8,\"./diaspora\":9,\"./utils\":13,\"./validationError\":14}],11:[function(require,module,exports){\n'use strict';\n\nconst {\n\t_, Promise,\n} = require( './dependencies' );\nconst EntityFactory = require( './entityFactory' );\nconst Diaspora = require( './diaspora' );\nconst Set = require( './set' );\n\nconst {\n\tentityPrototypeProperties,\n} = EntityFactory;\n\n/**\n * The model class is used to interact with the population of all data of the same type.\n */\nclass Model {\n\t/**\n\t * Create a new Model that is allowed to interact with all entities of data sources tables selected.\n\t * \n\t * @author gerkin\n\t * @param {string}           name      - Name of the model.\n\t * @param {ModelDescription} modelDesc - Hash representing the configuration of the model.\n\t */\n\tconstructor( name, modelDesc ) {\n\t\tconst reservedPropIntersect = _.intersection( entityPrototypeProperties, _.keys( modelDesc.attributes ));\n\t\tif ( 0 !== reservedPropIntersect.length ) {\n\t\t\tthrow new Error( `${ JSON.stringify( reservedPropIntersect ) } is/are reserved property names. To match those column names in data source, please use the data source mapper property` );\n\t\t}\n\t\tif ( !modelDesc.hasOwnProperty( 'sources' ) || !( _.isArrayLike( modelDesc.sources ) || _.isObject( modelDesc.sources ))) {\n\t\t\tthrow new TypeError( `Expect model sources to be either an array or an object, had ${ JSON.stringify( modelDesc.sources ) }.` );\n\t\t}\n\t\t// Normalize our sources: normalized form is an object with keys corresponding to source name, and key corresponding to remaps\n\t\tconst sourcesNormalized = _.isArrayLike( modelDesc.sources ) ? _.zipObject( modelDesc.sources, _.times( modelDesc.sources.length, _.constant({}))) : _.mapValues( modelDesc.sources, ( remap, dataSourceName ) => {\n\t\t\tif ( true === remap ) {\n\t\t\t\treturn {};\n\t\t\t} else if ( _.isObject( remap )) {\n\t\t\t\treturn remap;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( `Datasource \"${ dataSourceName }\" value is invalid: expect \\`true\\` or a remap hash, but have ${ JSON.stringify( remap ) }` );\n\t\t\t}\n\t\t});\n\t\t// List sources required by this model\n\t\tconst sourceNames = _.keys( sourcesNormalized );\n\t\tconst scopeAvailableSources = Diaspora.dataSources;\n\t\tconst modelSources = _.pick( scopeAvailableSources, sourceNames );\n\t\tconst missingSources = _.difference( sourceNames, _.keys( modelSources ));\n\t\tif ( 0 !== missingSources.length ) {\n\t\t\tthrow new Error( `Missing data sources ${ missingSources.map( v => `\"${ v }\"` ).join( ', ' ) }` );\n\t\t}\n\n\t\t// Now, we are sure that config is valid. We can configure our datasources with model options, and set `this` properties.\n\t\t_.forEach( sourcesNormalized, ( remap, sourceName ) => {\n\t\t\tconst sourceConfiguring = modelSources[sourceName];\n\t\t\tsourceConfiguring.configureCollection( name, remap );\n\t\t});\n\t\tthis.dataSources = modelSources;\n\t\tthis.defaultDataSource = sourceNames[0];\n\t\tthis.name = name;\n\t\tthis.entityFactory = EntityFactory( name, modelDesc.attributes, this );\n\t}\n\n\t/**\n\t * Create a new Model that is allowed to interact with all entities of data sources tables selected.\n\t * \n\t * @author gerkin\n\t * @throws  {Error} Thrown if requested source name does not exists.\n\t * @param   {string} [sourceName=Model.defaultDataSource] - Name of the source to get. It corresponds to one of the sources you set in {@link Model#modelDesc}.sources.\n\t * @returns {Adapters.DiasporaAdapter} Source adapter with requested name.\n\t */\n\tgetDataSource( sourceName ) {\n\t\tif ( _.isNil( sourceName )) {\n\t\t\tsourceName = this.defaultDataSource;\n\t\t} else if ( !this.dataSources.hasOwnProperty( sourceName )) {\n\t\t\tthrow new Error( `Unknown data source \"${ sourceName }\" in model \"${ this.name }\", available are ${ _.keys( this.dataSources ).map( v => `\"${ v }\"` ).join( ', ' ) }` );\n\t\t}\n\t\treturn this.dataSources[sourceName];\n\t}\n\n\t/**\n\t * Create a new *orphan* {@link Entity entity}.\n\t * \n\t * @author gerkin\n\t * @param   {Object} source - Object to copy attributes from.\n\t * @returns {Entity} New *orphan* entity.\n\t */\n\tspawn( source ) {\n\t\tconst newEntity = new this.entityFactory( source );\n\t\treturn newEntity;\n\t}\n\n\t/**\n\t * Create multiple new *orphan* {@link Entity entities}.\n\t * \n\t * @author gerkin\n\t * @param   {Object[]} sources - Array of objects to copy attributes from.\n\t * @returns {Set} Set with new *orphan* entities.\n\t */\n\tspawnMulti( sources ) {\n\t\treturn new Set( this, _.map( sources, source => this.spawn( source )));\n\t}\n\n\t/**\n\t * Insert a raw source object in the data store.\n\t * \n\t * @author gerkin\n\t * @param   {Object} source                                   - Object to copy attributes from.\n\t * @param   {string} [dataSourceName=Model.defaultDataSource] - Name of the data source to insert in.\n\t * @returns {Promise} Promise resolved with new *sync* {@link Entity entity}.\n\t */\n\tinsert( source, dataSourceName ) {\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.insertOne( this.name, source ).then( entity => {\n\t\t\treturn Promise.resolve( new this.entityFactory( entity ));\n\t\t});\n\t}\n\n\t/**\n\t * Insert multiple raw source objects in the data store.\n\t * \n\t * @author gerkin\n\t * @param   {Object[]} sources                                  - Array of object to copy attributes from.\n\t * @param   {string}   [dataSourceName=Model.defaultDataSource] - Name of the data source to insert in.\n\t * @returns {Promise} Promise resolved with a {@link Set set} containing new *sync* entities.\n\t */\n\tinsertMany( sources, dataSourceName ) {\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.insertMany( this.name, sources ).then( entities => {\n\t\t\tconst newEntities = _.map( entities, entity => new this.entityFactory( entity ));\n\t\t\tconst collection = new Set( this, newEntities );\n\t\t\treturn Promise.resolve( collection );\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve a single entity from specified data source that matches provided `queryFind` and `options`.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQueryOrCondition} [queryFind={}]                           - Query to get desired entity.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}]                             - Options for this query.\n\t * @param   {string}                               [dataSourceName=Model.defaultDataSource] - Name of the data source to get entity from.\n\t * @returns {Promise} Promise resolved with the found {@link Entity entity} in *sync* state.\n\t */\n\tfind( queryFind = {}, options = {}, dataSourceName ) {\n\t\tif ( _.isString( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = options;\n\t\t\toptions = {};\n\t\t} else if ( _.isString( queryFind ) && !!_.isNil( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = queryFind;\n\t\t\tqueryFind = {};\n\t\t\toptions = {};\n\t\t}\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.findOne( this.name, queryFind, options ).then( dataSourceEntity => {\n\t\t\tif ( _.isNil( dataSourceEntity )) {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tconst newEntity = new this.entityFactory( dataSourceEntity );\n\t\t\tnewEntity.dataSources[dataSource.name] = dataSourceEntity;\n\t\t\treturn Promise.resolve( newEntity );\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve multiple entities from specified data source that matches provided `queryFind` and `options`.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQueryOrCondition} [queryFind={}]                           - Query to get desired entities.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}]                             - Options for this query.\n\t * @param   {string}                               [dataSourceName=Model.defaultDataSource] - Name of the data source to get entities from.\n\t * @returns {Promise} Promise resolved with a {@link Set set} of found entities in *sync* state.\n\t */\n\tfindMany( queryFind = {}, options = {}, dataSourceName ) {\n\t\tif ( _.isString( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = options;\n\t\t\toptions = {};\n\t\t} else if ( _.isString( queryFind ) && !!_.isNil( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = queryFind;\n\t\t\tqueryFind = {};\n\t\t\toptions = {};\n\t\t}\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.findMany( this.name, queryFind, options ).then( entities => {\n\t\t\tconst newEntities = _.map( entities, entity => new this.entityFactory( entity ));\n\t\t\tconst collection = new Set( this, newEntities );\n\t\t\treturn Promise.resolve( collection );\n\t\t});\n\t}\n\n\t/**\n\t * Update a single entity from specified data source that matches provided `queryFind` and `options`.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQueryOrCondition} [queryFind={}]                           - Query to get desired entity.\n\t * @param   {Object}                               update                                   - Attributes to update on matched set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}]                             - Options for this query.\n\t * @param   {string}                               [dataSourceName=Model.defaultDataSource] - Name of the data source to get entity from.\n\t * @returns {Promise} Promise resolved with the updated {@link Entity entity} in *sync* state.\n\t */\n\tupdate( queryFind, update, options = {}, dataSourceName ) {\n\t\tif ( _.isString( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = options;\n\t\t\toptions = {};\n\t\t}\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.updateOne( this.name, queryFind, update, options ).then( dataSourceEntity => {\n\t\t\tif ( _.isNil( dataSourceEntity )) {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tconst newEntity = new this.entityFactory( dataSourceEntity );\n\t\t\treturn Promise.resolve( newEntity );\n\t\t});\n\t}\n\n\t/**\n\t * Update multiple entities from specified data source that matches provided `queryFind` and `options`.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQueryOrCondition} [queryFind={}]                           - Query to get desired entities.\n\t * @param   {Object}                               update                                   - Attributes to update on matched set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}]                             - Options for this query.\n\t * @param   {string}                               [dataSourceName=Model.defaultDataSource] - Name of the data source to get entities from.\n\t * @returns {Promise} Promise resolved with the {@link Set set} of found entities in *sync* state.\n\t */\n\tupdateMany( queryFind, update, options = {}, dataSourceName ) {\n\t\tif ( _.isString( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = options;\n\t\t\toptions = {};\n\t\t}\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.updateMany( this.name, queryFind, update, options ).then( entities => {\n\t\t\tconst newEntities = _.map( entities, entity => new this.entityFactory( entity ));\n\t\t\tconst collection = new Set( this, newEntities );\n\t\t\treturn Promise.resolve( collection );\n\t\t});\n\t}\n\n\t/**\n\t * Delete a single entity from specified data source that matches provided `queryFind` and `options`.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQueryOrCondition} [queryFind={}]                           - Query to get desired entity.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}]                             - Options for this query.\n\t * @param   {string}                               [dataSourceName=Model.defaultDataSource] - Name of the data source to get entity from.\n\t * @returns {Promise} Promise resolved with `undefined`.\n\t */\n\tdelete( queryFind = {}, options = {}, dataSourceName ) {\n\t\tif ( _.isString( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = options;\n\t\t\toptions = {};\n\t\t}\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.deleteOne( this.name, queryFind, options );\n\t}\n\n\t/**\n\t * Delete multiple entities from specified data source that matches provided `queryFind` and `options`.\n\t * \n\t * @author gerkin\n\t * @param   {QueryLanguage#SelectQueryOrCondition} [queryFind={}]                           - Query to get desired entities.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}]                             - Options for this query.\n\t * @param   {string}                               [dataSourceName=Model.defaultDataSource] - Name of the data source to get entities from.\n\t * @returns {Promise} Promise resolved with `undefined`.\n\t */\n\tdeleteMany( queryFind = {}, options = {}, dataSourceName ) {\n\t\tif ( _.isString( options ) && !!_.isNil( dataSourceName )) {\n\t\t\tdataSourceName = options;\n\t\t\toptions = {};\n\t\t}\n\t\tconst dataSource = this.getDataSource( dataSourceName );\n\t\treturn dataSource.deleteMany( this.name, queryFind, options );\n\t}\n}\n\nmodule.exports = Model;\n\n},{\"./dependencies\":8,\"./diaspora\":9,\"./entityFactory\":10,\"./set\":12}],12:[function(require,module,exports){\n'use strict';\n\nconst {\n\t_, Promise,\n} = require( './dependencies' );\nconst Utils = require( './utils' );\n\n/**\n * Collections are used to manage multiple entities at the same time. You may try to use this class as an array.\n */\nclass Set {\n\t/**\n\t * Create a new set, managing provided `entities` that must be generated from provided `model`.\n\t * \n\t * @param {Model}           model    - Model describing entities managed by this set.\n\t * @param {Entity|Entity[]} entities - Entities to manage with this set. Arguments are flattened, so you can provide as many nested arrays as you want.\n\t */\n\tconstructor( model, ...entities ) {\n\t\t// Flatten arguments\n\t\tentities = _( entities ).flatten();\n\t\t// Check if each entity is from the expected model\n\t\tSet.checkEntitiesFromModel( entities.value(), model );\n\n\t\tconst defined = Utils.defineEnumerableProperties( this, {\n\t\t\t/**\n\t\t\t * List entities of this set.\n\t\t\t * \n\t\t\t * @name entities\n\t\t\t * @readonly\n\t\t\t * @memberof Set\n\t\t\t * @instance\n\t\t\t * @type {LodashWrapper<Entity>}\n\t\t\t * @author Gerkin\n\t\t\t */\n\t\t\tentities: entities,\n\t\t\t/**\n\t\t\t * Model that generated this set.\n\t\t\t * \n\t\t\t * @name model\n\t\t\t * @readonly\n\t\t\t * @memberof Set\n\t\t\t * @instance\n\t\t\t * @type {Model}\n\t\t\t * @author Gerkin\n\t\t\t */\n\t\t\tmodel:    model,\n\t\t\t/**\n\t\t\t * Number of entities in this set.\n\t\t\t * \n\t\t\t * @name length\n\t\t\t * @readonly\n\t\t\t * @memberof Set\n\t\t\t * @instance\n\t\t\t * @type {Integer}\n\t\t\t * @author Gerkin\n\t\t\t */\n\t\t\tlength:   {\n\t\t\t\tget() {\n\t\t\t\t\treturn this.entities.size();\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn new Proxy( defined, {\n\t\t\tget( target, prop ) {\n\t\t\t\tif ( prop in target ) {\n\t\t\t\t\treturn target[prop];\n\t\t\t\t} else if ( prop in target.entities ) {\n\t\t\t\t\treturn target.entities[prop];\n\t\t\t\t} else if ( 'string' === typeof prop && prop.match( /^-?\\d+$/ ) && target.entities.nth( parseInt( prop ))) {\n\t\t\t\t\treturn target.entities.nth( parseInt( prop ));\n\t\t\t\t}\n\t\t\t},\n\t\t\tset( target, prop, val ) {\n\t\t\t\tif ( 'model' === prop ) {\n\t\t\t\t\treturn new Error( 'Can\\'t assign to read-only property \"model\".' );\n\t\t\t\t} else if ( 'entities' === prop ) {\n\t\t\t\t\tSet.checkEntitiesFromModel( val, target.model );\n\t\t\t\t\ttarget.entities = _( val );\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Check if all entities in the first argument are from the expected model.\n\t * \n\t * @author gerkin\n\t * @throws {TypeError} Thrown if one of the entity is not from provided `model`.\n\t * @param {Entity[]} entities - Array of entities to check.\n\t * @param {Model}    model    - Model expected to be the source of all entities.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tstatic checkEntitiesFromModel( entities, model ) {\n\t\tentities.forEach(( entity, index ) => {\n\t\t\tif ( entity.constructor.model !== model ) {\n\t\t\t\tthrow new TypeError( `Provided entity n°${ index } ${ entity } is not from model ${ model } (${ model.modelName })` );\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Persist all entities of this collection.\n\t * \n\t * @fires EntityFactory.Entity#beforeUpdate\n\t * @fires EntityFactory.Entity#afterUpdate\n\t * @author gerkin\n\t * @param {string} sourceName - Data source name to persist in.\n\t * @returns {Promise} Promise resolved once all items are persisted.\n\t * @see {@link EntityFactory.Entity#persist}\n\t */\n\tpersist( sourceName ) {\n\t\treturn Promise.all( this.entities.map( entity => entity.emit( 'beforeUpdate' ))).then(() => {\n\t\t\treturn Promise.all( this.entities.map( entity => entity.persist( sourceName, {\n\t\t\t\tskipEvents: true,\n\t\t\t})));\n\t\t}).then(() => {\n\t\t\treturn Promise.all( this.entities.map( entity => entity.emit( 'afterUpdate' )));\n\t\t}).then(() => this );\n\t}\n\n\t/**\n\t * Reload all entities of this collection.\n\t * \n\t * @fires EntityFactory.Entity#beforeFind\n\t * @fires EntityFactory.Entity#afterFind\n\t * @author gerkin\n\t * @param {string} sourceName - Data source name to reload entities from.\n\t * @returns {Promise} Promise resolved once all items are reloaded.\n\t * @see {@link EntityFactory.Entity#fetch}\n\t */\n\tfetch( sourceName ) {\n\t\treturn Promise.all( this.entities.map( entity => entity.emit( 'beforeFind' ))).then(() => {\n\t\t\treturn Promise.all( this.entities.map( entity => entity.fetch( sourceName, {\n\t\t\t\tskipEvents: true,\n\t\t\t})));\n\t\t}).then(() => {\n\t\t\treturn Promise.all( this.entities.map( entity => entity.emit( 'afterFind' )));\n\t\t}).then(() => this );\n\t}\n\n\t/**\n\t * Destroy all entities from this collection.\n\t * \n\t * @fires EntityFactory.Entity#beforeDelete\n\t * @fires EntityFactory.Entity#afterDelete\n\t * @author gerkin\n\t * @param {string} sourceName - Name of the data source to delete entities from.\n\t * @returns {Promise} Promise resolved once all items are destroyed.\n\t * @see {@link EntityFactory.Entity#destroy}\n\t */\n\tdestroy( sourceName ) {\n\t\treturn Promise.all( this.entities.map( entity => entity.emit( 'beforeDelete' ))).then(() => {\n\t\t\treturn Promise.all( this.entities.map( entity => entity.destroy( sourceName, {\n\t\t\t\tskipEvents: true,\n\t\t\t})));\n\t\t}).then(() => {\n\t\t\treturn Promise.all( this.entities.map( entity => entity.emit( 'afterDelete' )));\n\t\t}).then(() => this );\n\t}\n\n\t/**\n\t * Update all entities in the set with given object.\n\t * \n\t * @author gerkin\n\t * @param   {Object} newData - Attributes to change in each entity of the collection.\n\t * @returns {Collection} `this`.\n\t */\n\tupdate( newData ) {\n\t\tthis.entities.forEach( entity => {\n\t\t\t_.forEach( newData, ( val, key ) => {\n\t\t\t\tif ( _.isUndefined( val )) {\n\t\t\t\t\tdelete entity[key];\n\t\t\t\t} else {\n\t\t\t\t\tentity[key] = val;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n}\n\nmodule.exports = Set;\n\n},{\"./dependencies\":8,\"./utils\":13}],13:[function(require,module,exports){\n'use strict';\n\nconst {\n\t_,\n} = require( './dependencies' );\n\nmodule.exports = {\n\tdefineEnumerableProperties( subject, handlers ) {\n\t\tconst remappedHandlers = _.mapValues( handlers, handler => {\n\t\t\tif ( _.isNil( handler ) || 'object' !== typeof handler || Object.getPrototypeOf( handler ) !== Object.prototype ) {\n\t\t\t\thandler = {\n\t\t\t\t\tvalue: handler,\n\t\t\t\t};\n\t\t\t}\n\t\t\tlet defaults = {\n\t\t\t\tenumerable: true,\n\t\t\t};\n\t\t\tif ( !handler.hasOwnProperty( 'get' )) {\n\t\t\t\tdefaults.writable = false;\n\t\t\t}\n\t\t\t_.defaults( handler, defaults );\n\t\t\treturn handler;\n\t\t});\n\t\treturn Object.defineProperties( subject, remappedHandlers );\n\t},\n};\n\n},{\"./dependencies\":8}],14:[function(require,module,exports){\n'use strict';\n\nconst {\n\t_,\n} = require( './dependencies' );\n\nconst stringifyValidationObject = validationErrors => {\n\treturn _( validationErrors ).mapValues(( error, key ) => {\n\t\treturn `${ key } => ${ JSON.stringify( error.value ) }\n* ${ _( error ).omit([ 'value' ]).values().map( _.identity ).value() }`;\n\t}).values().join( '\\n* ' );\n};\n\n/**\n * This class represents an error related to validation.\n * @extends Error\n */\nclass ValidationError extends Error {\n\t/**\n\t * Construct a new validation error.\n\t * \n\t * @author gerkin\n\t * @see Diaspora.check\n\t * @param {Object} validationErrors - Object describing validation errors, usually returned by {@link Diaspora.check}.\n\t * @param {string} message          - Message of this error.\n\t * @param {*}      errorArgs        - Arguments to transfer to parent Error.\n\t */\n\tconstructor( validationErrors, message, ...errorArgs ) {\n\t\tmessage += `\n${ stringifyValidationObject( validationErrors ) }`;\n\t\tsuper( message, ...errorArgs );\n\t\tthis.validationErrors = validationErrors;\n\t\tthis.constructor = ValidationError;\n\t\tif ( 'function' === typeof Error.captureStackTrace ) {\n\t\t\tError.captureStackTrace( this, this.constructor );\n\t\t} else { \n\t\t\tthis.stack = ( new Error( message )).stack; \n\t\t}\n\t}\n}\n\nmodule.exports = ValidationError;\n\n},{\"./dependencies\":8}],15:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[1])(1)\n});"]}