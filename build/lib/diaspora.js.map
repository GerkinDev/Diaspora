{"version":3,"sources":["../../lib/diaspora.js"],"names":["dependencies","require","_","Promise","logger","process","browser","winston","log","createLogger","level","format","json","transports","env","NODE_ENV","add","Console","simple","console","adapters","dataSources","models","ensureAllEntities","adapter","table","filterResults","entity","remapOutput","classEntity","isNil","results","resolve","isArrayLike","map","remapArgs","args","optIndex","update","queryType","remapFunction","remapInput","query","number","insertion","getRemapFunction","wrapDataSourceAction","callback","upd","indexOf","normalizeOptions","normalizeQuery","err","reject","call","then","ERRORS","NON_EMPTY_STR","template","requireName","classname","value","isString","length","Error","c","p","v","getDefault","identifier","match","parts","split","namedFunction","get","Diaspora","namedFunctions","isFunction","Date","default","modelDesc","defaults","mapValues","fieldDesc","field","defaultField","out","isUndefined","type","isObject","attributes","keys","createDataSource","adapterLabel","config","hasOwnProperty","e","Object","join","baseAdapter","newDataSource","Proxy","target","key","method","toLowerCase","mapKeys","slice","val","registerDataSource","name","dataSource","merge","createNamedDataSource","sourceName","configHash","declareModel","model","components","Model","assign","registerAdapter","label","module","exports","Errors","ExtendableError","ValidationError","EntityValidationError","SetValidationError","EntityStateError","Adapters","Adapter","Entity","EntityFactory","Set","Validator","Utils"],"mappings":"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","file":"diaspora.js","sourcesContent":["'use strict';\n\nconst dependencies = require( './dependencies' );\nconst {\n\t_, Promise,\n} = dependencies;\n\n/**\n * Event emitter that can execute async handlers in sequence\n *\n * @typedef {Object} SequentialEvent\n * @author Gerkin\n * @see {@link https://gerkindev.github.io/SequentialEvent.js/SequentialEvent.html Sequential Event documentation}.\n */\n\n/**\n * @module Diaspora\n */\n\nconst logger = (() => {\n\tif ( !process.browser ) {\n\t\tconst winston = require( 'winston' );\n\t\tconst log = winston.createLogger({\n\t\t\tlevel:      'silly',\n\t\t\tformat:     winston.format.json(),\n\t\t\ttransports: [\n\t\t\t\t//\n\t\t\t\t// - Write to all logs with level `info` and below to `combined.log`\n\t\t\t\t// - Write all logs error (and below) to `error.log`.\n\t\t\t\t//\n\t\t\t],\n\t\t});\n\n\t\t//\n\t\t// If we're not in production then log to the `console` with the format:\n\t\t// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n\t\t//\n\t\tif ( process.env.NODE_ENV !== 'production' ) {\n\t\t\tlog.add( new winston.transports.Console({\n\t\t\t\tformat: winston.format.simple(),\n\t\t\t}));\n\t\t}\n\t\treturn log;\n\t} else {\n\t\treturn console;\n\t}\n})();\n\nconst adapters = {};\nconst dataSources = {};\nconst models = {};\n\nconst ensureAllEntities = ( adapter, table ) => {\n\t// Filter our results\n\tconst filterResults = entity => {\n\t\t// Remap fields\n\t\tentity = adapter.remapOutput( table, entity );\n\t\t// Force results to be class instances\n\t\tif ( !( entity instanceof adapter.classEntity ) && !_.isNil( entity )) {\n\t\t\treturn new adapter.classEntity( entity, adapter );\n\t\t}\n\t\treturn entity;\n\t};\n\n\treturn results => {\n\t\tif ( _.isNil( results )) {\n\t\t\treturn Promise.resolve();\n\t\t} else if ( _.isArrayLike( results )) {\n\t\t\treturn Promise.resolve( _.map( results, filterResults ));\n\t\t} else {\n\t\t\treturn Promise.resolve( filterResults( results ));\n\t\t}\n\t};\n};\n\nconst remapArgs = ( args, optIndex, update, queryType, remapFunction ) => {\n\tif ( false !== optIndex ) {\n\t\t// Remap input objects\n\t\tif ( true === args[optIndex].remapInput ) {\n\t\t\targs[0] = remapFunction( args[0]);\n\n\t\t\tif ( true === update ) {\n\t\t\t\targs[1] = remapFunction( args[1]);\n\t\t\t}\n\t\t}\n\t\targs[optIndex].remapInput = false;\n\t} else if ( 'insert' === queryType.query ) {\n\t\t// If inserting, then, we'll need to know if we are inserting *several* entities or a *single* one.\n\t\tif ( 'many' === queryType.number ) {\n\t\t\t// If inserting *several* entities, map the array to remap each entity objects...\n\t\t\targs[0] = _.map( args[0], insertion => remapFunction( insertion ));\n\t\t} else {\n\t\t\t// ... or we are inserting a *single* one. We still need to remap entity.\n\t\t\targs[0] = remapFunction( args[0]);\n\t\t}\n\t}\n};\n\nconst getRemapFunction = ( adapter, table ) => {\n\treturn query => {\n\t\treturn adapter.remapInput( table, query );\n\t};\n};\n\nconst wrapDataSourceAction = ( callback, queryType, adapter ) => {\n\treturn ( table, ...args ) => {\n\n\t\t// Transform arguments for find, update & delete\n\t\tlet optIndex = false;\n\t\tlet upd = false;\n\t\tif ([ 'find', 'delete' ].indexOf( queryType.query ) >= 0 ) {\n\t\t\t// For find & delete, options are 3rd argument (so 2nd item in `args`)\n\t\t\toptIndex = 1;\n\t\t} else if ( 'update' === queryType.query ) {\n\t\t\t// For update, options are 4th argument (so 3nd item in `args`), and `upd` flag is toggled on.\n\t\t\toptIndex = 2;\n\t\t\tupd = true;\n\t\t}\n\t\ttry {\n\t\t\tif ( false !== optIndex ) {\n\t\t\t\t// Options to canonical\n\t\t\t\targs[optIndex] = adapter.normalizeOptions( args[optIndex]);\n\t\t\t\t// Query search to cannonical\n\t\t\t\targs[0] = adapter.normalizeQuery( args[0], args[optIndex]);\n\t\t\t}\n\t\t\tremapArgs( args, optIndex, upd, queryType, getRemapFunction( adapter, table ));\n\t\t} catch ( err ) {\n\t\t\treturn Promise.reject( err );\n\t\t}\n\n\t\t// Hook after promise resolution\n\t\treturn callback.call( adapter, table, ...args ).then( ensureAllEntities( adapter, table ));\n\t};\n};\n\nconst ERRORS = {\n\tNON_EMPTY_STR: _.template( '<%= c %> <%= p %> must be a non empty string, had \"<%= v %>\"' ),\n};\n\nconst requireName = ( classname, value ) => {\n\tif ( !_.isString( value ) && value.length > 0 ) {\n\t\tthrow new Error( ERRORS.NON_EMPTY_STR({\n\t\t\tc: classname,\n\t\t\tp: 'name',\n\t\t\tv: value,\n\t\t}));\n\t}\n};\n\nconst getDefault = identifier => {\n\tif ( _.isString( identifier )) {\n\t\tconst match = identifier.match( /^(.+?)(?:::(.+?))+$/ );\n\t\tif ( match ) {\n\t\t\tconst parts = identifier.split( '::' );\n\t\t\tconst namedFunction = _.get( Diaspora.namedFunctions, parts );\n\t\t\tif ( _.isFunction( namedFunction )) {\n\t\t\t\treturn namedFunction();\n\t\t\t}\n\t\t}\n\t}\n\treturn identifier;\n};\n\n/**\n * Diaspora main namespace\n * @namespace Diaspora\n * @public\n * @author gerkin\n */\nconst Diaspora = {\n\tnamedFunctions: {\n\t\tDiaspora: {\n\t\t\t'Date.now()': () => new Date(),\n\t\t},\n\t},\n\n\t/**\n\t * Set default values if required.\n\t *\n\t * @author gerkin\n\t * @param   {Object}         entity    - Entity to set defaults in.\n\t * @param   {ModelPrototype} modelDesc - Model description.\n\t * @returns {Object} Entity merged with default values.\n\t */\n\tdefault( entity, modelDesc ) {\n\t\t// Apply method `defaultField` on each field described\n\t\treturn _.defaults(\n\t\t\tentity,\n\t\t\t_.mapValues(\n\t\t\t\tmodelDesc,\n\t\t\t\t( fieldDesc, field ) => this.defaultField(\n\t\t\t\t\tentity[field],\n\t\t\t\t\tfieldDesc\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t},\n\n\t/**\n\t * Set the default on a single field according to its description.\n\t *\n\t * @author gerkin\n\t * @param   {Any}             value     - Value to default.\n\t * @param   {FieldDescriptor} fieldDesc - Description of the field to default.\n\t * @returns {Any} Defaulted value.\n\t */\n\tdefaultField( value, fieldDesc ) {\n\t\tlet out;\n\t\tif ( !_.isUndefined( value )) {\n\t\t\tout = value;\n\t\t} else {\n\t\t\tout = _.isFunction( fieldDesc.default ) ? fieldDesc.default() : getDefault( fieldDesc.default );\n\t\t}\n\t\tif ( 'object' === fieldDesc.type && _.isObject( fieldDesc.attributes ) && _.keys( fieldDesc.attributes ).length > 0 && !_.isNil( out )) {\n\t\t\treturn this.default( out, fieldDesc.attributes );\n\t\t} else {\n\t\t\treturn out;\n\t\t}\n\t},\n\n\t/**\n\t * Create a data source (usually, a database connection) that may be used by models.\n\t *\n\t * @author gerkin\n\t * @throws  {Error} Thrown if provided `adapter` label does not correspond to any adapter registered.\n\t * @param   {string} adapterLabel - Label of the adapter used to create the data source.\n\t * @param   {Object} config       - Configuration hash. This configuration hash depends on the adapter we want to use.\n\t * @returns {Adapters.DiasporaAdapter} New adapter spawned.\n\t */\n\tcreateDataSource( adapterLabel, config ) {\n\t\tif ( !adapters.hasOwnProperty( adapterLabel )) {\n\t\t\ttry {\n\t\t\t\trequire( `diaspora-${  adapterLabel }` );\n\t\t\t} catch ( e ) {\n\t\t\t\tthrow new Error( `Unknown adapter \"${ adapterLabel }\". Available currently are ${ Object.keys( adapters ).join( ', ' ) }. Additionnaly, an error was thrown: ${ e }` );\n\t\t\t}\n\t\t}\n\t\tconst baseAdapter = new adapters[adapterLabel]( config );\n\t\tconst newDataSource = new Proxy( baseAdapter, {\n\t\t\tget( target, key ) {\n\t\t\t\t// If this is an adapter action method, wrap it with filters. Our method keys are only string, not tags\n\t\t\t\tif ( _.isString( key )) {\n\t\t\t\t\tlet method = key.match( /^(find|update|insert|delete)(Many|One)$/ );\n\t\t\t\t\tif ( null !== method ) {\n\t\t\t\t\t\tmethod[2] = method[2].toLowerCase();\n\t\t\t\t\t\t// Cast regex match to object like this: {full: 'findMany', query: 'find', number: 'many'}\n\t\t\t\t\t\tmethod = _.mapKeys( method.slice( 0, 3 ), ( val, key ) => {\n\t\t\t\t\t\t\treturn [ 'full', 'query', 'number' ][key];\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn wrapDataSourceAction( target[key], method, target );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn target[key];\n\t\t\t},\n\t\t});\n\t\treturn newDataSource;\n\t},\n\n\t/**\n\t * Stores the data source with provided label.\n\t *\n\t * @author gerkin\n\t * @throws  {Error} Error is thrown if parameters are incorrect or the name is already used or `dataSource` is not an adapter.\n\t * @param   {string}          name       - Name associated with this datasource.\n\t * @param   {DiasporaAdapter} dataSource - Datasource itself.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tregisterDataSource( name, dataSource ) {\n\t\trequireName( 'DataSource', name );\n\t\tif ( dataSources.hasOwnProperty( name )) {\n\t\t\tthrow new Error( `DataSource name already used, had \"${ name }\"` );\n\t\t}\n\t\t/*\t\tif ( !( dataSource instanceof Diaspora.components.Adapters.Adapter )) {\n\t\t\tthrow new Error( 'DataSource must be an instance inheriting \"DiasporaAdapter\"' );\n\t\t}*/\n\t\tdataSource.name = name;\n\t\t_.merge( dataSources, {\n\t\t\t[name]: dataSource,\n\t\t});\n\t\treturn dataSource;\n\t},\n\n\t/**\n\t * Create a data source (usually, a database connection) that may be used by models.\n\t *\n\t * @author gerkin\n\t * @throws  {Error} Thrown if provided `adapter` label does not correspond to any adapter registered.\n\t * @param   {string} sourceName   - Name associated with this datasource.\n\t * @param   {string} adapterLabel - Label of the adapter used to create the data source.\n\t * @param   {Object} configHash   - Configuration hash. This configuration hash depends on the adapter we want to use.\n\t * @returns {Adapters.DiasporaAdapter} New adapter spawned.\n\t */\n\tcreateNamedDataSource( sourceName, adapterLabel, configHash ) {\n\t\tconst dataSource = Diaspora.createDataSource( adapterLabel, configHash );\n\t\treturn Diaspora.registerDataSource( sourceName, dataSource );\n\t},\n\n\t/**\n\t * Create a new Model with provided description.\n\t *\n\t * @author gerkin\n\t * @throws  {Error} Thrown if parameters are incorrect.\n\t * @param   {string} name      - Name associated with this datasource.\n\t * @param   {Object} modelDesc - Description of the model to define.\n\t * @returns {Model} Model created.\n\t */\n\tdeclareModel( name, modelDesc ) {\n\t\tif ( !_.isString( name ) && name.length > 0 ) {\n\t\t\trequireName( 'Model', name );\n\t\t}\n\t\tif ( !_.isObject( modelDesc )) {\n\t\t\tthrow new Error( '\"modelDesc\" must be an object' );\n\t\t}\n\t\tconst model = new Diaspora.components.Model( name, modelDesc );\n\t\t_.assign( models, {\n\t\t\t[name]: model,\n\t\t});\n\t\treturn model;\n\t},\n\n\t/**\n\t * Register a new adapter and make it available to use by models.\n\t *\n\t * @author gerkin\n\t * @throws  {Error} Thrown if an adapter already exists with same label.\n\t * @throws  {TypeError} Thrown if adapter does not extends {@link Adapters.DiasporaAdapter}.\n\t * @param   {string}                   label   - Label of the adapter to register.\n\t * @param   {Adapters.DiasporaAdapter} adapter - The adapter to register.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tregisterAdapter( label, adapter ) {\n\t\tif ( adapters.hasOwnProperty( label )) {\n\t\t\tthrow new Error( `Adapter with label \"${ label }\" already exists.` );\n\t\t}\n\t\t// Check inheritance of adapter\n\t\t/*if ( !( adapter.prototype instanceof Diaspora.components.Adapters.Adapter )) {\n\t\t\tthrow new TypeError( `Trying to register an adapter with label \"${ label }\", but it does not extends DiasporaAdapter.` );\n\t\t}*/\n\t\tadapters[label] = adapter;\n\t},\n\n\t/**\n\t * Hash containing all available models.\n\t *\n\t * @type {Object}\n\t * @property {Model} * - Model associated with that name.\n\t * @memberof Diaspora\n\t * @public\n\t * @author gerkin\n\t * @see Use {@link Diaspora.declareModel} to add models.\n\t */\n\tmodels,\n\n\t/**\n\t * Hash containing all available data sources.\n\t *\n\t * @type {Object}\n\t * @property {Adapters.DiasporaAdapter} * - Instances of adapters declared.\n\t * @memberof Diaspora\n\t * @private\n\t * @author gerkin\n\t * @see Use {@link Diaspora.createNamedDataSource} or {@link Diaspora.registerDataSource} to make data sources available for models.\n\t */\n\tdataSources,\n\n\t/**\n\t * Hash containing all available adapters. The only universal adapter is `inMemory`.\n\t *\n\t * @type {Object}\n\t * @property {Adapters.DiasporaAdapter}        *        - Adapter constructor. Those constructors must be subclasses of DiasporaAdapter.\n\t * @property {Adapters.InMemorDiasporaAdapter} inMemory - InMemoryDiasporaAdapter constructor.\n\t * @memberof Diaspora\n\t * @private\n\t * @author gerkin\n\t * @see Use {@link Diaspora.registerAdapter} to add adapters.\n\t */\n\tadapters,\n\n\t/**\n\t * Dependencies of Diaspora.\n\t *\n\t * @type {Object}\n\t * @property {Bluebird}        Promise          - Bluebird lib.\n\t * @property {Lodash}          _                - Lodash lib.\n\t * @property {SequentialEvent} sequential-event - SequentialEvent lib.\n\t * @memberof Diaspora\n\t * @private\n\t * @author gerkin\n\t */\n\tdependencies: dependencies,\n\n\t/**\n\t * Logger used by Diaspora and its adapters. You can use this property to configure winston. On brower environment, this is replaced by a reference to global {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/console Console}.\n\t *\n\t * @type {Winston|Console}\n\t * @memberof Diaspora\n\t * @public\n\t * @author gerkin\n\t */\n\tlogger,\n};\n\nmodule.exports = Diaspora;\n\n// Load components after export, so requires of Diaspora returns a complete object\n/**\n * Hash of components exposed by Diaspora.\n *\n * @type {Object}\n * @memberof Diaspora\n * @private\n * @author gerkin\n */\nDiaspora.components = {\n\tErrors: {\n\t\tExtendableError:       require( './errors/extendableError' ),\n\t\tValidationError:       require( './errors/validationError' ),\n\t\tEntityValidationError: require( './errors/entityValidationError' ),\n\t\tSetValidationError:    require( './errors/setValidationError' ),\n\t\tEntityStateError:      require( './errors/entityStateError' ),\n\t},\n};\n_.assign( Diaspora.components, {\n\tAdapters: {\n\t\tAdapter: require( './adapters/base/adapter' ),\n\t\tEntity:  require( './adapters/base/entity' ),\n\t},\n});\n_.assign( Diaspora.components, {\n\tModel:         require( './model' ),\n\tEntityFactory: require( './entityFactory' ),\n\tEntity:        require( './entityFactory' ).Entity,\n\tSet:           require( './set' ),\n\tValidator:     require( './validator' ),\n\tUtils:         require( './utils' ),\n});\n\n// Register available built-in adapters\nDiaspora.registerAdapter( 'inMemory', require( './adapters/inMemory/adapter' ));\nDiaspora.registerAdapter( 'webApi', require( './adapters/webApi/adapter' ));\n// Register webStorage only if in browser\nif ( process.browser ) {\n\tDiaspora.registerAdapter( 'webStorage', require( './adapters/webStorage/adapter' ));\n}\n"]}