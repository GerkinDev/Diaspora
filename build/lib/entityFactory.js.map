{"version":3,"sources":["../../lib/entityFactory.js"],"names":["require","_","Promise","SequentialEvent","Diaspora","DataStoreEntity","components","Adapters","Entity","EntityStateError","DEFAULT_OPTIONS","skipEvents","PRIVATE","Symbol","maybeEmit","entity","options","eventsArgs","events","castArray","resolve","emit","then","length","slice","maybeThrowInvalidEntityState","beforeState","dataSource","method","reject","lastDataSource","name","table","uidQuery","entityCtrSteps","castTypes","source","modelDesc","attrs","attributes","forEach","currentVal","attrName","attrDesc","isObject","type","isString","isInteger","Date","loadSource","_entity","assign","state","dataSources","deserialize","omit","toObject","bindLifecycleEvents","lifecycleEvents","eventFunctions","eventName","on","eventFunction","model","modelAttrsKeys","keys","Object","seal","mapValues","undefined","_this","sourceDModel","difference","Error","JSON","stringify","default","cloneDeep","id","idHash","validate","constructor","validator","replaceAttributes","newContent","getDiff","dataStoreEntity","dataStoreObject","concat","uniq","value","values","map","key","diff","omitBy","zipObject","val","isEqual","serialize","data","persist","sourceName","defaults","getDataSource","_maybeEmit","partial","suffix","insertOne","updateOne","fetch","destroy","without","getId","EntityFactory","SubEntity","methods","methodName","prototype","staticMethods","staticMethodName","staticMethod","bind","module","exports"],"mappings":"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","file":"entityFactory.js","sourcesContent":["'use strict';\n\nconst {\n\t_, Promise, SequentialEvent,\n} = require( './dependencies' );\nconst Diaspora = require( './diaspora' );\nconst DataStoreEntity = Diaspora.components.Adapters.Entity;\nconst EntityStateError = require( './errors/entityStateError' );\n\n/**\n * @module EntityFactory\n */\n\nconst DEFAULT_OPTIONS = { skipEvents: false };\nconst PRIVATE = Symbol( 'PRIVATE' );\n\nconst maybeEmit = ( entity, options, eventsArgs, events ) => {\n\tevents = _.castArray( events );\n\tif ( options.skipEvents ) {\n\t\treturn Promise.resolve( entity );\n\t} else {\n\t\treturn entity.emit( events[0], ...eventsArgs ).then(() => {\n\t\t\tif ( events.length > 1 ) {\n\t\t\t\treturn maybeEmit( entity, options, eventsArgs, _.slice( events, 1 ));\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve( entity );\n\t\t\t}\n\t\t});\n\t}\n};\nconst maybeThrowInvalidEntityState = ( entity, beforeState, dataSource, method ) => {\n\treturn () => {\n\t\t// Depending on state, we are going to perform a different operation\n\t\tif ( 'orphan' === beforeState ) {\n\t\t\treturn Promise.reject( new EntityStateError( 'Can\\'t fetch an orphan entity.' ));\n\t\t} else {\n\t\t\tentity[PRIVATE].lastDataSource = dataSource.name;\n\t\t\treturn dataSource[method]( entity.table( dataSource.name ), entity.uidQuery( dataSource ));\n\t\t}\n\t};\n};\n\nconst entityCtrSteps = {\n\tcastTypes( source, modelDesc ) {\n\t\tconst attrs = modelDesc.attributes;\n\t\t_.forEach( source, ( currentVal, attrName ) => {\n\t\t\tconst attrDesc = attrs[attrName];\n\t\t\tif ( _.isObject( attrDesc )) {\n\t\t\t\tswitch ( attrDesc.type ) {\n\t\t\t\t\tcase 'date': {\n\t\t\t\t\t\tif ( _.isString( currentVal ) || _.isInteger( currentVal )) {\n\t\t\t\t\t\t\tsource[attrName] = new Date( currentVal );\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn source;\n\t},\n\tloadSource( entity, source ) {\n\t\t// If we construct our Entity from a datastore entity (that can happen internally in Diaspora), set it to `sync` state\n\t\tif ( source instanceof DataStoreEntity ) {\n\t\t\tconst _entity = entity[PRIVATE];\n\t\t\t_.assign( _entity, {\n\t\t\t\tstate:          'sync',\n\t\t\t\tlastDataSource: source.dataSource.name,\n\t\t\t});\n\t\t\t_entity.dataSources[_entity.lastDataSource] = source;\n\t\t\tsource = entity.deserialize( _.omit( source.toObject(), [ 'id' ]));\n\t\t}\n\t\treturn source;\n\t},\n\tbindLifecycleEvents( entity, modelDesc ) {\n\t\t// Bind lifecycle events\n\t\t_.forEach( modelDesc.lifecycleEvents, ( eventFunctions, eventName ) => {\n\t\t\t// Iterate on each event functions. `_.castArray` will ensure we iterate on an array if a single function is provided.\n\t\t\t_.forEach( _.castArray( eventFunctions ), eventFunction => {\n\t\t\t\tentity.on( eventName, eventFunction );\n\t\t\t});\n\t\t});\n\t},\n};\n\n/**\n * The entity is the class you use to manage a single document in all data sources managed by your model.\n * > Note that this class is proxied: you may try to access to undocumented class properties to get entity's data attributes\n *\n * @extends SequentialEvent\n */\nclass Entity extends SequentialEvent {\n\t/**\n\t * Create a new entity.\n\t *\n\t * @author gerkin\n\t * @param {string}                                   name        - Name of this model.\n\t * @param {ModelDescription}                         modelDesc   - Model configuration that generated the associated `model`.\n\t * @param {Model}                                    model       - Model that will spawn entities.\n\t * @param {Object|DataStoreEntities.DataStoreEntity} [source={}] - Hash with properties to copy on the new object.\n\t *        If provided object inherits DataStoreEntity, the constructed entity is built in `sync` state.\n\t */\n\tconstructor( name, modelDesc, model, source = {}) {\n\t\tconst modelAttrsKeys = _.keys( modelDesc.attributes );\n\t\tsuper();\n\n\t\t// ### Init defaults\n\t\tconst dataSources = Object.seal( _.mapValues( model.dataSources, () => undefined ));\n\t\tconst _this = {\n\t\t\tstate:          'orphan',\n\t\t\tlastDataSource: null,\n\t\t\tdataSources,\n\t\t\tname,\n\t\t\tmodelDesc,\n\t\t\tmodel,\n\t\t};\n\t\tthis[PRIVATE] = _this;\n\n\t\t// ### Cast types if required\n\t\tsource = entityCtrSteps.castTypes( source, modelDesc );\n\n\t\t// ### Load datas from source\n\t\tsource = entityCtrSteps.loadSource( this, source );\n\n\t\t// ### Final validation\n\t\t// Check keys provided in source\n\t\tconst sourceDModel = _.difference( source, modelAttrsKeys );\n\t\tif ( 0 !== sourceDModel.length ) { // Later, add a criteria for schemaless models\n\t\t\tthrow new Error( `Source has unknown keys: ${ JSON.stringify( sourceDModel ) } in ${ JSON.stringify( source ) }` );\n\t\t}\n\n\t\t// ### Generate prototype & attributes\n\t\t// Now we know that the source is valid. Deep clone to detach object values from entity then Default model attributes with our model desc\n\t\t_this.attributes = Diaspora.default( _.cloneDeep( source ), modelDesc.attributes );\n\t\tsource = null;\n\n\t\t// ### Load events\n\t\tentityCtrSteps.bindLifecycleEvents( this, modelDesc );\n\t}\n\n\t/**\n\t * Generate the query to get this unique entity in the desired data source.\n\t *\n\t * @author gerkin\n\t * @param   {Adapters.DiasporaAdapter} dataSource - Name of the data source to get query for.\n\t * @returns {Object} Query to find this entity.\n\t */\n\tuidQuery( dataSource ) {\n\t\treturn {\n\t\t\tid: this[PRIVATE].attributes.idHash[dataSource.name],\n\t\t};\n\t}\n\n\t/**\n\t * Return the table of this entity in the specified data source.\n\t *\n\t * @author gerkin\n\t * @returns {string} Name of the table.\n\t */\n\ttable( /*sourceName*/ ) {\n\t\t// Will be used later\n\t\treturn this[PRIVATE].name;\n\t}\n\n\t/**\n\t * Check if the entity matches model description.\n\t *\n\t * @author gerkin\n\t * @throws EntityValidationError Thrown if validation failed. This breaks event chain and prevent persistance.\n\t * @returns {undefined} This function does not return anything.\n\t * @see Validator.Validator#validate\n\t */\n\tvalidate() {\n\t\tthis.constructor.model.validator.validate( this[PRIVATE].attributes );\n\t}\n\n\t/**\n\t * Remove all editable properties & replace them with provided object.\n\t *\n\t * @author gerkin\n\t * @param   {Object} [newContent={}] - Replacement content.\n\t * @returns {module:EntityFactory~Entity} Returns `this`.\n\t */\n\treplaceAttributes( newContent = {}) {\n\t\tnewContent.idHash = this[PRIVATE].attributes.idHash;\n\t\tthis[PRIVATE].attributes = newContent;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Generate a diff update query by checking deltas with last source interaction.\n\t *\n\t * @author gerkin\n\t * @param   {Adapters.DiasporaAdapter} dataSource - Data source to diff with.\n\t * @returns {Object} Diff query.\n\t */\n\tgetDiff( dataSource ) {\n\t\tconst dataStoreEntity = this[PRIVATE].dataSources[dataSource.name];\n\t\tconst dataStoreObject = dataStoreEntity.toObject();\n\n\t\tconst keys = _( this[PRIVATE].attributes ).keys().concat( _.keys( dataStoreObject )).uniq().difference([ 'idHash' ]).value();\n\t\tconst values = _.map( keys, key => this[PRIVATE].attributes[key]);\n\t\tconst diff = _.omitBy( _.zipObject( keys, values ), ( val, key ) => _.isEqual( this[PRIVATE].attributes[key], dataStoreObject[key]));\n\t\treturn diff;\n\t}\n\n\t/**\n\t * Returns a copy of this entity attributes.\n\t *\n\t * @author gerkin\n\t * @returns {Object} Attributes of this entity.\n\t */\n\ttoObject() {\n\t\treturn this[PRIVATE].attributes;\n\t}\n\n\t/**\n\t * Applied before persisting the entity, this function is in charge to convert entity convinient attributes to a raw entity.\n\t *\n\t * @author gerkin\n\t * @param   {Object} data - Data to convert to primitive types.\n\t * @returns {Object} Object with Primitives-only types.\n\t */\n\tserialize( data ) {\n\t\treturn _.cloneDeep( data );\n\t}\n\n\t/**\n\t * Applied after retrieving the entity, this function is in charge to convert entity raw attributes to convinient types.\n\t *\n\t * @author gerkin\n\t * @param   {Object} data - Data to convert from primitive types.\n\t * @returns {Object} Object with Primitives & non primitives types.\n\t */\n\tdeserialize( data ) {\n\t\treturn _.cloneDeep( data );\n\t}\n\n\t/**\n\t * Save this entity in specified data source.\n\t *\n\t * @fires EntityFactory.Entity#beforeUpdate\n\t * @fires EntityFactory.Entity#afterUpdate\n\t * @author gerkin\n\t * @param   {string}  sourceName                 - Name of the data source to persist entity in.\n\t * @param   {Object}  [options]                  - Hash of options for this query. You should not use this parameter yourself: Diaspora uses it internally.\n\t * @param   {boolean} [options.skipEvents=false] - If true, won't trigger events `beforeUpdate` and `afterUpdate`.\n\t * @returns {Promise} Promise resolved once entity is saved. Resolved with `this`.\n\t */\n\tpersist( sourceName, options = {}) {\n\t\t_.defaults( options, DEFAULT_OPTIONS );\n\t\t// Change the state of the entity\n\t\tconst beforeState = this[PRIVATE].state;\n\t\tthis[PRIVATE].state = 'syncing';\n\t\t// Generate events args\n\t\tconst dataSource = this.constructor.model.getDataSource( sourceName );\n\t\tconst eventsArgs = [ dataSource.name ];\n\t\tconst _maybeEmit = _.partial( maybeEmit, this, options, eventsArgs );\n\n\t\t// Get suffix. If entity was orphan, we are creating. Otherwise, we are updating\n\t\tconst suffix = 'orphan' === beforeState ? 'Create' : 'Update';\n\t\treturn _maybeEmit([ 'beforePersist', 'beforeValidate' ])\n\t\t\t.then(() => this.validate())\n\t\t\t.then(() => _maybeEmit([ 'afterValidate', `beforePersist${ suffix }` ]))\n\t\t\t.then(() => {\n\t\t\t\tthis[PRIVATE].lastDataSource = dataSource.name;\n\t\t\t\t// Depending on state, we are going to perform a different operation\n\t\t\t\tif ( 'orphan' === beforeState ) {\n\t\t\t\t\treturn dataSource.insertOne( this.table( sourceName ), this.toObject());\n\t\t\t\t} else {\n\t\t\t\t\treturn dataSource.updateOne( this.table( sourceName ), this.uidQuery( dataSource ), this.getDiff( dataSource ));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then( dataStoreEntity => {\n\t\t\t\tentityCtrSteps.castTypes( dataStoreEntity, this[PRIVATE].modelDesc );\n\t\t\t\tthis[PRIVATE].state = 'sync';\n\t\t\t\tthis[PRIVATE].attributes = dataStoreEntity.toObject();\n\t\t\t\tthis[PRIVATE].dataSources[dataSource.name] = dataStoreEntity;\n\n\t\t\t\treturn _maybeEmit([ `afterPersist${ suffix }`, 'afterPersist' ]);\n\t\t\t});\n\t}\n\n\t/**\n\t * Reload this entity from specified data source.\n\t *\n\t * @fires EntityFactory.Entity#beforeFind\n\t * @fires EntityFactory.Entity#afterFind\n\t * @author gerkin\n\t * @param   {string}  sourceName                 - Name of the data source to fetch entity from.\n\t * @param   {Object}  [options]                  - Hash of options for this query. You should not use this parameter yourself: Diaspora uses it internally.\n\t * @param   {boolean} [options.skipEvents=false] - If true, won't trigger events `beforeFind` and `afterFind`.\n\t * @returns {Promise} Promise resolved once entity is reloaded. Resolved with `this`.\n\t */\n\tfetch( sourceName, options = {}) {\n\t\t_.defaults( options, DEFAULT_OPTIONS );\n\t\t// Change the state of the entity\n\t\tconst beforeState = this[PRIVATE].state;\n\t\tthis[PRIVATE].state = 'syncing';\n\t\t// Generate events args\n\t\tconst dataSource = this.constructor.model.getDataSource( sourceName );\n\t\tconst eventsArgs = [ dataSource.name, this.serialize( this[PRIVATE].attributes ) ];\n\t\tconst _maybeEmit = _.partial( maybeEmit, this, options, eventsArgs );\n\t\treturn _maybeEmit( 'beforeFetch' )\n\t\t\t.then( maybeThrowInvalidEntityState( this, beforeState, dataSource, 'findOne' ))\n\t\t\t.then( dataStoreEntity => {\n\t\t\t\tentityCtrSteps.castTypes( dataStoreEntity, this[PRIVATE].modelDesc );\n\t\t\t\tthis[PRIVATE].state = 'sync';\n\t\t\t\tthis[PRIVATE].attributes = dataStoreEntity.toObject();\n\t\t\t\tthis[PRIVATE].dataSources[dataSource.name] = dataStoreEntity;\n\n\t\t\t\treturn _maybeEmit( 'afterFetch' );\n\t\t\t});\n\t}\n\n\t/**\n\t * Delete this entity from the specified data source.\n\t *\n\t * @fires EntityFactory.Entity#beforeDelete\n\t * @fires EntityFactory.Entity#afterDelete\n\t * @author gerkin\n\t * @param   {string}  sourceName                 - Name of the data source to delete entity from.\n\t * @param   {Object}  [options]                  - Hash of options for this query. You should not use this parameter yourself: Diaspora uses it internally.\n\t * @param   {boolean} [options.skipEvents=false] - If true, won't trigger events `beforeDelete` and `afterDelete`.\n\t * @returns {Promise} Promise resolved once entity is destroyed. Resolved with `this`.\n\t */\n\tdestroy( sourceName, options = {}) {\n\t\t_.defaults( options, DEFAULT_OPTIONS );\n\t\t// Change the state of the entity\n\t\tconst beforeState = this[PRIVATE].state;\n\t\tthis[PRIVATE].state = 'syncing';\n\t\t// Generate events args\n\t\tconst dataSource = this.constructor.model.getDataSource( sourceName );\n\t\tconst eventsArgs = [ dataSource.name ];\n\t\tconst _maybeEmit = _.partial( maybeEmit, this, options, eventsArgs );\n\t\treturn _maybeEmit( 'beforeDestroy' )\n\t\t\t.then( maybeThrowInvalidEntityState( this, beforeState, dataSource, 'deleteOne' ))\n\t\t\t.then(() => {\n\t\t\t// If this was our only data source, then go back to orphan state\n\t\t\t\tif ( 0 === _.without( this[PRIVATE].model.dataSources, dataSource.name ).length ) {\n\t\t\t\t\tthis[PRIVATE].state = 'orphan';\n\t\t\t\t} else {\n\t\t\t\t\tthis[PRIVATE].state = 'sync';\n\t\t\t\t\tdelete this[PRIVATE].attributes.idHash[dataSource.name];\n\t\t\t\t}\n\t\t\t\tthis[PRIVATE].dataSources[dataSource.name] = undefined;\n\t\t\t\treturn _maybeEmit( 'afterDestroy' );\n\t\t\t});\n\t}\n\n\t/**\n\t * Get the ID for the given source name.\n\t * \n\t * @param   {string} sourceName - Name of the source to get ID from.\n\t * @returns {string} Id of this entity in requested data source.\n\t */\n\tgetId( sourceName ) {\n\t\tconst dataSource = this.constructor.model.getDataSource( sourceName );\n\t\treturn this[PRIVATE].dataSources[dataSource.name].id;\n\t}\n\n\t/**\n\t * Hash that links each data source with its name. This object is prepared with keys from model sources, and sealed.\n\t *\n\t * @type {Object}\n\t * @author gerkin\n\t */\n\tget dataSources() {\n\t\treturn this[PRIVATE].dataSources;\n\t}\n\n\t/**\n\t * TODO.\n\t *\n\t * @type {TODO}\n\t * @author gerkin\n\t */\n\tget attributes() {\n\t\treturn this[PRIVATE].attributes;\n\t}\n\n\t/**\n\t * Get entity's current state.\n\t *\n\t * @type {Entity.State}\n\t * @author gerkin\n\t */\n\tget state() {\n\t\treturn this[PRIVATE].state;\n\t}\n\n\t/**\n\t * Get entity's last data source.\n\t *\n\t * @type {null|string}\n\t * @author gerkin\n\t */\n\tget lastDataSource() {\n\t\treturn this[PRIVATE].lastDataSource;\n\t}\n}\n\n/**\n * This factory function generate a new class constructor, prepared for a specific model.\n *\n * @method EntityFactory\n * @public\n * @static\n * @param   {string}           name       - Name of this model.\n * @param   {ModelDescription} modelDesc  - Model configuration that generated the associated `model`.\n * @param   {Model}            model      - Model that will spawn entities.\n * @returns {module:EntityFactory~Entity} Entity constructor to use with this model.\n * @property {module:EntityFactory~Entity} Entity Entity constructor\n */\nconst EntityFactory = ( name, modelDesc, model ) => {\n\t/**\n\t * @ignore\n\t */\n\tclass SubEntity extends Entity {\n\t\t/**\n\t\t * Name of the class.\n\t\t *\n\t\t * @type {string}\n\t\t * @author gerkin\n\t\t */\n\t\tstatic get name() {\n\t\t\treturn `${ name  }Entity`;\n\t\t}\n\n\t\t/**\n\t\t * Reference to this entity's model.\n\t\t *\n\t\t * @type {Model}\n\t\t * @author gerkin\n\t\t */\n\t\tstatic get model() {\n\t\t\treturn model;\n\t\t}\n\t}\n\t// We use keys `methods` and not `functions` as explained in this [StackOverflow thread](https://stackoverflow.com/a/155655/4839162).\n\t// Extend prototype with methods in our model description\n\t_.forEach( modelDesc.methods, ( method, methodName ) => {\n\t\tSubEntity.prototype[methodName] = method;\n\t});\n\t// Add static methods\n\t_.forEach( modelDesc.staticMethods, ( staticMethodName, staticMethod ) => {\n\t\tSubEntity[staticMethodName] = staticMethod;\n\t});\n\treturn SubEntity.bind( SubEntity, name, modelDesc, model );\n};\nEntityFactory.Entity = Entity;\n// =====\n// ## Lifecycle Events\n\n// -----\n// ### Persist\n\n/**\n * @event EntityFactory.Entity#beforePersist\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#beforeValidate\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#afterValidate\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#beforePersistCreate\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#beforePersistUpdate\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#afterPersistCreate\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#afterPersistUpdate\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#afterPersist\n * @type {String}\n */\n\n// -----\n// ### Find\n\n/**\n * @event EntityFactory.Entity#beforeFind\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#afterFind\n * @type {String}\n */\n\n// -----\n// ### Destroy\n\n/**\n * @event EntityFactory.Entity#beforeDestroy\n * @type {String}\n */\n\n/**\n * @event EntityFactory.Entity#afterDestroy\n * @type {String}\n */\n\nmodule.exports = EntityFactory;\n"]}