{"version":3,"sources":["../../../lib/errors/extendableError.js"],"names":["ExtendableError","message","errorArgs","name","constructor","Error","captureStackTrace","stack","module","exports"],"mappings":";;;;;;;;;;;;;AAAA;AAEA;;;;AAIA;;;;;;;;;;MAKMA,e;;;;;AACL;;;;;;;AAOA,6BAAaC,OAAb,EAAqC;AAAA;;AAAA,wCAAZC,SAAY;AAAZA,iBAAY;AAAA;;AACpC,+CAAOD,OAAP,SAAmBC,SAAnB;AACA,YAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,YAAKF,OAAL,GAAeA,OAAf;;AACA,UAAK,eAAe,OAAOI,MAAMC,iBAAjC,EAAqD;AACpDD,cAAMC,iBAAN,gCAA+B,MAAKF,WAApC;AACA,OAFD,MAEO;AACN,cAAKG,KAAL,GAAe,IAAIF,KAAJ,CAAWJ,OAAX,CAAF,CAAwBM,KAArC;AACA;;AARmC;AASpC;;;IAjB4BF,K;;AAoB9BG,SAAOC,OAAP,GAAiBT,eAAjB","file":"extendableError.js","sourcesContent":["'use strict';\n\n/**\n * @module Errors/ExtendableError\n */\n\n/**\n * This class is the base class for custom Diaspora errors\n *\n * @extends Error\n */\nclass ExtendableError extends Error {\n\t/**\n\t * Construct a new extendable error.\n\t *\n\t * @author gerkin\n\t * @param {string} message          - Message of this error.\n\t * @param {*}      errorArgs        - Arguments to transfer to parent Error.\n\t */\n\tconstructor( message, ...errorArgs ) {\n\t\tsuper( message, ...errorArgs );\n\t\tthis.name = this.constructor.name;\n\t\tthis.message = message;\n\t\tif ( 'function' === typeof Error.captureStackTrace ) {\n\t\t\tError.captureStackTrace( this, this.constructor );\n\t\t} else {\n\t\t\tthis.stack = ( new Error( message )).stack;\n\t\t}\n\t}\n}\n\nmodule.exports = ExtendableError;\n"]}