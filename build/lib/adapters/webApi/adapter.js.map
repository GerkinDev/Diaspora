{"version":3,"sources":["../../../../lib/adapters/webApi/adapter.js"],"names":["require","_","Promise","Diaspora","DiasporaAdapter","components","Adapters","Adapter","WebApiEntity","queryObjectToString","queryObject","chain","cloneDeep","omitBy","isObject","val","isEmpty","mapValues","JSON","stringify","toPairs","map","partial","encodeURIComponent","arr","join","value","httpErrorFactories","Error","xhr","response","message","status","defineXhrEvents","resolve","reject","onload","inRange","get","onerror","httpRequest","method","endPoint","data","process","browser","isNil","toLowerCase","json","qs","XMLHttpRequest","queryString","responseType","open","setRequestHeader","send","undefined","getQueryObject","queryFind","options","skip","assign","omit","where","maybeAddIdHashToEntities","entities","adapter","unary","setIdHash","bind","checkWebApiAdapterConfig","isString","config","host","scheme","WebApiDiasporaAdapter","defaults","port","path","pluralApis","baseEndPoint","portString","schemeString","state","httpQuery","verb","getPluralEndpoint","hasOwnProperty","insertOne","table","entity","maybeCastEntity","insertMany","maybeCastSet","findOne","findMany","updateOne","update","idHash","name","id","updateMany","deleteOne","deleteMany","module","exports"],"mappings":"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","file":"adapter.js","sourcesContent":["'use strict';\n\nconst {\n\t_, Promise,\n} = require( '../../dependencies' );\n\nconst Diaspora = require( '../../diaspora' );\nconst DiasporaAdapter = Diaspora.components.Adapters.Adapter;\nconst WebApiEntity = require( './entity.js' );\n\nconst queryObjectToString = queryObject => {\n\treturn _( queryObject ).chain( _.cloneDeep ).omitBy( val => _.isObject( val ) && _.isEmpty( val ))\n\t// { foo: 1, bar: { baz: 2 } }\n\t\t.mapValues( JSON.stringify )\n\t// { foo: '1', bar: '{\"baz\": \"2\"}' }\n\t\t.toPairs()\n\t// [ [ 'foo', '1' ], [ 'bar', '{\"baz\":2}' ] ]\n\t\t.map( _.partial( _.map, _, encodeURIComponent ))\n\t// [ [ 'foo', '1' ], [ 'bar', '%7B%22baz%22%3A2%7D' ] ]\n\t\t.map( arr => `${ arr[0]  }=${  arr[1] }` )\n\t// [ 'foo=1', 'bar=%7B%22baz%22%3A2%7D' ]\n\t\t.join( '&' ).value();\n};\n\nconst httpErrorFactories = {\n\t400: xhr => new Error( `Posted data through HTTP is invalid; message \"${ xhr.response.message }\"` ),\n\t_:   xhr => new Error( `Unhandled HTTP error with status code ${ xhr.status } & message \"${ xhr.response.message }\"` ),\n};\n\nconst defineXhrEvents = ( xhr, resolve, reject ) => {\n\txhr.onload = () => {\n\t\tif ( _.inRange( xhr.status, 200, 299 )) {\n\t\t\treturn resolve( xhr.response );\n\t\t} else {\n\t\t\treturn reject( _.get( httpErrorFactories, xhr.status, httpErrorFactories._ )( xhr ));\n\t\t}\n\t};\n\txhr.onerror = () => {\n\t\treturn reject( httpErrorFactories._( xhr ));\n\t};\n};\n\nconst httpRequest = async( method, endPoint, data, queryObject ) => {\n\tif ( !process.browser ) {\n\t\tif ( _.isNil( data )) {\n\t\t\tdata = true;\n\t\t}\n\t\treturn await require( 'request-promise' )[method.toLowerCase()]( endPoint, {\n\t\t\tjson: data,\n\t\t\tqs:   _.mapValues( queryObject, JSON.stringify ),\n\t\t});\n\t} else {\n\t\treturn new Promise(( resolve, reject ) => {\n\t\t\t/* globals XMLHttpRequest: false */\n\t\t\tconst xhr = new XMLHttpRequest();\n\t\t\tdefineXhrEvents( xhr, resolve, reject );\n\t\t\tconst queryString = queryObjectToString( queryObject );\n\t\t\txhr.responseType = 'json';\n\t\t\txhr.open( method, `${ endPoint }${ queryString ? `?${  queryString }` : '' }` );\n\t\t\txhr.setRequestHeader( 'Content-Type', 'application/json' );\n\t\t\txhr.send( _.isNil( data ) ? undefined : JSON.stringify( data ));\n\t\t});\n\t}\n};\n\nconst getQueryObject = ( queryFind, options ) => {\n\tif ( 0 === options.skip ) {\n\t\tdelete options.skip;\n\t}\n\n\treturn _.assign({}, _.omit( options, [ 'remapInput', 'remapOutput' ]), {where: queryFind});\n};\n\nconst maybeAddIdHashToEntities = ( entities, adapter ) => {\n\tif ( !_.isEmpty( entities )) {\n\t\tentities = _.map( entities, _.unary( adapter.setIdHash.bind( adapter )));\n\t}\n\treturn entities;\n};\n\nconst checkWebApiAdapterConfig = config => {\n\tif ( !process.browser && !_.isString( config.host )) {\n\t\tthrow new Error( `\"config.host\" is not defined, or is not a string: had \"${ config.host }\"` );\n\t}\n\tif ( !process.browser && !_.isString( config.scheme )) {\n\t\tthrow new Error( `\"config.scheme\" is not defined, or is not a string: had \"${ config.scheme }\"` );\n\t}\n};\n\n/**\n * Adapter for RESTful HTTP APIs.\n *\n * @see https://www.npmjs.com/package/diaspora-server Diaspora-Server: Package built on Diaspora & Express.js to easily configure HTTP APIs compatible with this adapter.\n * @extends Adapters.DiasporaAdapter\n * @memberof Adapters\n */\nclass WebApiDiasporaAdapter extends DiasporaAdapter {\n\t/**\n\t * Create a new instance of web api adapter.\n\t *\n\t * @param {Object}         [config]                 - Configuration of this adapter.\n\t * @param {string|false}   [config.scheme = false]  - Scheme to use. On server environment, this parameter is *required*. On browser environment, it defaults to a relative scheme (IE ``). Note that it will be suffixed with `//`.\n\t * @param {string|false}   [config.host = false]    - Hostname of the endpoint. On server environment, this parameter is *required*.\n\t * @param {number|false}   [config.port = false]    - Port of the endpoint.\n\t * @param {number|false}   [config.path = '']       - Path to the endpoint.\n\t * @param {Object<string>} [config.pluralApis = {}] - Hash with keys being the singular name of the endpoint, and values being the associated plural name of the same endpoint.\n\t * @author gerkin\n\t */\n\tconstructor( config = {}) {\n\t\t/**\n\t\t * Link to the WebApiEntity.\n\t\t *\n\t\t * @name classEntity\n\t\t * @type {DataStoreEntities.WebApiEntity}\n\t\t * @memberof Adapters.WebApiDiasporaAdapter\n\t\t * @instance\n\t\t * @author Gerkin\n\t\t */\n\t\tsuper( WebApiEntity );\n\n\t\t/**\n\t\t * Base URL to the REST API\n\t\t *\n\t\t * @name baseEndPoint\n\t\t * @type {string}\n\t\t * @author Gerkin\n\t\t */\n\t\t_.defaults( config, {\n\t\t\tscheme:     false,\n\t\t\thost:       false,\n\t\t\tport:       false,\n\t\t\tpath:       '',\n\t\t\tpluralApis: {},\n\t\t});\n\t\tcheckWebApiAdapterConfig( config );\n\t\tif ( process.browser && false === config.host ) {\n\t\t\t// Endpoint is an absolute url\n\t\t\tthis.baseEndPoint = config.path;\n\t\t} else {\n\t\t\tconst portString = config.port ? `:${ config.port }` : '';\n\t\t\tconst schemeString = config.scheme ? `${ config.scheme }:` : '';\n\t\t\tthis.baseEndPoint = `${ schemeString }//${ config.host }${ portString }${ config.path }`;\n\t\t}\n\t\tthis.state = 'ready';\n\n\t\t/**\n\t\t * Hash mapping singular API names to plural API names\n\t\t *\n\t\t * @name pluralApis\n\t\t * @type {Object<string>}\n\t\t * @author Gerkin\n\t\t */\n\t\tthis.pluralApis = config.pluralApis;\n\t}\n\n\t/**\n\t * Send an http query to the targeted `endPoint` using `method` as verb.\n\t * \n\t * @async\n\t * @param   {string} verb          - Valid HTTP verb. This adapter uses `GET`, `POST`, `PATCH` & `DELETE`.\n\t * @param   {string} endPoint      - Name of the endpoint to interact with. It will be prepended with {@link Adapters.WebApiDiasporaAdapter#baseEndPoint}.\n\t * @param   {Object} [data]        - Optionnal data to send within the body of the request.\n\t * @param   {Object} [queryObject] - Optionnal query object to send along with the request.\n\t * @returns {Promise<Object>} Promise resolved with the resulting data.\n\t */\n\thttpQuery( verb, endPoint, data, queryObject ) {\n\t\treturn httpRequest( verb, `${ this.baseEndPoint }/${  endPoint.toLowerCase() }`, data, queryObject );\n\t}\n\n\t/**\n\t * Get the plural name of an endpoint.\n\t * \n\t * @param   {string} endPoint - Name of the endpoint.\n\t * @returns {string} Plural version of the endpoint name.\n\t */\n\tgetPluralEndpoint( endPoint ) {\n\t\tif ( this.pluralApis.hasOwnProperty( endPoint )) {\n\t\t\treturn this.pluralApis[endPoint];\n\t\t} else {\n\t\t\treturn `${ endPoint  }s`;\n\t\t}\n\t}\n\n\t// -----\n\t// ### Insert\n\n\t/**\n\t * Insert a single entity through an HTTP API.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#insertOne}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string} table  - Name of the table to insert data in.\n\t * @param   {Object} entity - Hash representing the entity to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link WebApiEntity}* `entity`).\n\t */\n\tasync insertOne( table, entity ) {\n\t\tentity = await this.httpQuery( 'POST', table, entity );\n\t\tif ( !_.isNil( entity )) {\n\t\t\tthis.setIdHash( entity );\n\t\t}\n\t\treturn this.maybeCastEntity( entity );\n\t}\n\n\t/**\n\t * Insert several entities through an HTTP API.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#insertMany}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string}   table    - Name of the table to insert data in.\n\t * @param   {Object[]} entities - Hash representing entities to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link WebApiEntity[]}* `entities`).\n\t */\n\tasync insertMany( table, entities ) {\n\t\tentities = await this.httpQuery( 'POST', this.getPluralEndpoint( table ), entities );\n\t\tentities = maybeAddIdHashToEntities( entities, this );\n\t\treturn this.maybeCastSet( entities );\n\t}\n\n\t// -----\n\t// ### Find\n\n\t/**\n\t * \n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#findOne}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link InMemoryEntity}* `entity`).\n\t */\n\tasync findOne( table, queryFind, options = {}) {\n\t\tlet entity = await this.httpQuery( 'GET', table, null, getQueryObject( queryFind, options ));\n\t\tif ( !_.isNil( entity )) {\n\t\t\tthis.setIdHash( entity );\n\t\t}\n\t\treturn this.maybeCastEntity( entity );\n\t}\n\n\t/**\n\t * \n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#findMany}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once items are found. Called with (*{@link InMemoryEntity}[]* `entities`).\n\t */\n\tasync findMany( table, queryFind, options = {}) {\n\t\tlet entities = await this.httpQuery( 'GET', this.getPluralEndpoint( table ), null, getQueryObject( queryFind, options ));\n\t\tentities = maybeAddIdHashToEntities( entities, this );\n\t\treturn this.maybeCastSet( entities );\n\t}\n\n\t// -----\n\t// ### Update\n\n\t/**\n\t * \n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#updateOne}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to update data in.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once update is done. Called with (*{@link InMemoryEntity}* `entity`).\n\t */\n\tasync updateOne( table, queryFind, update, options = {}) {\n\t\tlet entity = await this.httpQuery( 'PATCH', table, update, getQueryObject( queryFind, options ));\n\t\tif ( !_.isNil( entity )) {\n\t\t\tentity.idHash = {\n\t\t\t\t[this.name]: entity.id,\n\t\t\t};\n\t\t}\n\t\treturn this.maybeCastEntity( entity );\n\t}\n\n\t/**\n\t * \n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#updateMany}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to update data in.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once update is done. Called with (*{@link InMemoryEntity}[]* `entities`).\n\t */\n\tasync updateMany( table, queryFind, update, options = {}) {\n\t\tlet entities = await this.httpQuery( 'PATCH', this.getPluralEndpoint( table ), update, getQueryObject( queryFind, options ));\n\t\tentities = maybeAddIdHashToEntities( entities, this );\n\t\treturn this.maybeCastSet( entities );\n\t}\n\n\t// -----\n\t// ### Delete\n\n\t/**\n\t * \n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteOne}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*undefined*).\n\t */\n\tasync deleteOne( table, queryFind, options = {}) {\n\t\treturn await this.httpQuery( 'DELETE', table, null, getQueryObject( queryFind, options ));\n\t}\n\n\t/**\n\t * \n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteMany}, modified for use of web api.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once items are deleted. Called with (*undefined*).\n\t */\n\tasync deleteMany( table, queryFind, options = {}) {\n\t\treturn await this.httpQuery( 'DELETE', this.getPluralEndpoint( table ), null, getQueryObject( queryFind, options ));\n\t}\n}\n\nmodule.exports = WebApiDiasporaAdapter;\n"]}