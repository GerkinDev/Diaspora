{"version":3,"sources":["../../../../lib/adapters/webStorage/adapter.js"],"names":["require","_","Promise","Utils","Diaspora","DiasporaAdapter","components","Adapters","Adapter","WebStorageEntity","WebStorageDiasporaAdapter","config","defaults","session","state","source","global","sessionStorage","localStorage","configureCollection","tableName","remaps","ensureCollectionExists","table","index","getItem","isNil","setItem","JSON","stringify","parse","getItemName","id","insertOne","entity","cloneDeep","generateUUID","setIdHash","tableIndex","push","error","reject","resolve","maybeCastEntity","insertMany","entities","map","classEntity","maybeCastSet","findOneById","item","findOne","queryFind","options","skip","isObject","isEqual","keys","$equal","items","returnedItem","matched","each","itemId","matchEntity","updateOne","update","then","applyUpdateEntity","deleteOne","pull","entityToDelete","removeItem","deleteMany","findMany","pullAll","entitiesToDelete","forEach","module","exports"],"mappings":"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","file":"adapter.js","sourcesContent":["'use strict';\n\nconst {\n\t_, Promise,\n} = require( '../../dependencies' );\nconst Utils = require( '../../utils' );\n\nconst Diaspora = require( '../../diaspora' );\nconst DiasporaAdapter = Diaspora.components.Adapters.Adapter;\nconst WebStorageEntity = require( './entity' );\n\n/**\n * This class is used to use local storage or session storage as a data store. This adapter should be used only by the browser.\n *\n * @extends Adapters.DiasporaAdapter\n * @memberof Adapters\n */\nclass WebStorageDiasporaAdapter extends DiasporaAdapter {\n\t/**\n\t * Create a new instance of local storage adapter.\n\t *\n\t * @author gerkin\n\t * @param {Object}  config                 - Configuration object.\n\t * @param {boolean} [config.session=false] - Set to true to use sessionStorage instead of localStorage.\n\t */\n\tconstructor( config ) {\n\t\t/**\n\t\t * Link to the WebStorageEntity.\n\t\t *\n\t\t * @name classEntity\n\t\t * @type {DataStoreEntities.WebStorageEntity}\n\t\t * @memberof Adapters.WebStorageDiasporaAdapter\n\t\t * @instance\n\t\t * @author Gerkin\n\t\t */\n\t\tsuper( WebStorageEntity );\n\t\t_.defaults( config, {\n\t\t\tsession: false,\n\t\t});\n\t\tthis.state = 'ready';\n\t\t/**\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/API/Storage Storage api} where to store data.\n\t\t *\n\t\t * @type {Storage}\n\t\t * @author Gerkin\n\t\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage localStorage} and {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage sessionStorage} on MDN web docs.\n\t\t * @see {@link Adapters.WebStorageDiasporaAdapter}:config.session parameter.\n\t\t */\n\t\tthis.source = ( true === config.session ? global.sessionStorage : global.localStorage );\n\t}\n\n\t/**\n\t * Create the collection index and call {@link Adapters.DiasporaAdapter#configureCollection}.\n\t *\n\t * @author gerkin\n\t * @param {string} tableName - Name of the table (usually, model name).\n\t * @param {Object} remaps    - Associative hash that links entity field names with data source field names.\n\t * @returns {undefined} This function does not return anything.\n\t */\n\tconfigureCollection( tableName, remaps ) {\n\t\tsuper.configureCollection( tableName, remaps );\n\t\tthis.ensureCollectionExists( tableName );\n\t}\n\n\t// -----\n\t// ### Utils\n\n\t/**\n\t * Create the table key if it does not exist.\n\t *\n\t * @author gerkin\n\t * @param   {string} table - Name of the table.\n\t * @returns {string[]} Index of the collection.\n\t */\n\tensureCollectionExists( table ) {\n\t\tlet index = this.source.getItem( table );\n\t\tif ( _.isNil( index )) {\n\t\t\tindex = [];\n\t\t\tthis.source.setItem( table, JSON.stringify( index ));\n\t\t} else {\n\t\t\tindex = JSON.parse( index );\n\t\t}\n\t\treturn index;\n\t}\n\n\t/**\n\t * Deduce the item name from table name and item ID.\n\t *\n\t * @author gerkin\n\t * @param   {string} table - Name of the table to construct name for.\n\t * @param   {string} id    - Id of the item to find.\n\t * @returns {string} Name of the item.\n\t */\n\tgetItemName( table, id ) {\n\t\treturn `${ table }.id=${ id }`;\n\t}\n\n\t// -----\n\t// ### Insert\n\n\t/**\n\t * Insert a single entity in the local storage.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#insertOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string} table  - Name of the table to insert data in.\n\t * @param   {Object} entity - Hash representing the entity to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link DataStoreEntities.WebStorageEntity}* `entity`).\n\t */\n\tinsertOne( table, entity ) {\n\t\tentity = _.cloneDeep( entity || {});\n\t\tentity.id = Utils.generateUUID();\n\t\tthis.setIdHash( entity );\n\t\ttry {\n\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\ttableIndex.push( entity.id );\n\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t\tthis.source.setItem( this.getItemName( table, entity.id ), JSON.stringify( entity ));\n\t\t} catch ( error ) {\n\t\t\treturn Promise.reject( error );\n\t\t}\n\t\treturn Promise.resolve( this.maybeCastEntity( entity ));\n\t}\n\n\t/**\n\t * Insert several entities in the local storage.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#insertMany}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}   table    - Name of the table to insert data in.\n\t * @param   {Object[]} entities - Array of hashes representing entities to insert.\n\t * @returns {Promise} Promise resolved once insertion is done. Called with (*{@link DataStoreEntities.WebStorageEntity}[]* `entities`).\n\t */\n\tinsertMany( table, entities ) {\n\t\tentities = _.cloneDeep( entities );\n\t\ttry {\n\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\tentities = entities.map(( entity = {}) => {\n\t\t\t\tentity.id = Utils.generateUUID();\n\t\t\t\tthis.setIdHash( entity );\n\t\t\t\ttableIndex.push( entity.id );\n\t\t\t\tthis.source.setItem( this.getItemName( table, entity.id ), JSON.stringify( entity ));\n\t\t\t\treturn new this.classEntity( entity, this );\n\t\t\t});\n\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t} catch ( error ) {\n\t\t\treturn Promise.reject( error );\n\t\t}\n\t\treturn Promise.resolve( this.maybeCastSet( entities ));\n\t}\n\n\t// -----\n\t// ### Find\n\n\t/**\n\t * Find a single local storage entity using its id.\n\t *\n\t * @author gerkin\n\t * @param   {string} table - Name of the collection to search entity in.\n\t * @param   {string} id    - Id of the entity to search.\n\t * @returns {DataStoreEntities.WebStorageEntity|undefined} Found entity, or undefined if not found.\n\t */\n\tfindOneById( table, id ) {\n\t\tlet item = this.source.getItem( this.getItemName( table, id ));\n\t\tif ( !_.isNil( item )) {\n\t\t\titem = JSON.parse( item );\n\t\t}\n\t\treturn Promise.resolve( this.maybeCastEntity( item ));\n\t}\n\n\t/**\n\t * Retrieve a single entity from the local storage.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#findOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the model to retrieve data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is found. Called with (*{@link DataStoreEntities.WebStorageEntity}* `entity`).\n\t */\n\tfindOne( table, queryFind, options = {}) {\n\t\t_.defaults( options, {\n\t\t\tskip: 0,\n\t\t});\n\t\tif ( !_.isObject( queryFind )) {\n\t\t\treturn this.findOneById( table, queryFind );\n\t\t} else if ( _.isEqual( _.keys( queryFind ), [ 'id' ]) && _.isEqual( _.keys( queryFind.id ), [ '$equal' ])) {\n\t\t\treturn this.findOneById( table, queryFind.id.$equal );\n\t\t}\n\t\tconst items = this.ensureCollectionExists( table );\n\t\tlet returnedItem;\n\t\tlet matched = 0;\n\t\t_.each( items, itemId => {\n\t\t\tconst item = JSON.parse( this.source.getItem( this.getItemName( table, itemId )));\n\t\t\tif ( this.matchEntity( queryFind, item )) {\n\t\t\t\tmatched++;\n\t\t\t\t// If we matched enough items\n\t\t\t\tif ( matched > options.skip ) {\n\t\t\t\t\treturnedItem = item;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn Promise.resolve( this.maybeCastEntity( returnedItem ));\n\t}\n\n\t// -----\n\t// ### Update\n\n\t/**\n\t * Update a single entity in the memory.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#updateOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to update data in.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {Object}                               update       - Object properties to set.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once update is done. Called with (*{@link DataStoreEntities.WebStorageEntity}* `entity`).\n\t */\n\tupdateOne( table, queryFind, update, options ) {\n\t\t_.defaults( options, {\n\t\t\tskip: 0,\n\t\t});\n\t\treturn this.findOne( table, queryFind, options ).then( entity => {\n\t\t\tif ( _.isNil( entity )) {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tUtils.applyUpdateEntity( update, entity );\n\t\t\ttry {\n\t\t\t\tthis.source.setItem( this.getItemName( table, entity.id ), JSON.stringify( entity ));\n\t\t\t\treturn Promise.resolve( entity );\n\t\t\t} catch ( error ) {\n\t\t\t\treturn Promise.reject( error );\n\t\t\t}\n\t\t});\n\t}\n\n\t// -----\n\t// ### Delete\n\n\t/**\n\t * Delete a single entity from the local storage.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteOne}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing the entity to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once item is deleted. Called with (*undefined*).\n\t */\n\tdeleteOne( table, queryFind, options = {}) {\n\t\treturn this.findOne( table, queryFind, options ).then( entityToDelete => {\n\t\t\ttry {\n\t\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\t\t_.pull( tableIndex, entityToDelete.id );\n\t\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t\t\tthis.source.removeItem( this.getItemName( table, entityToDelete.id ));\n\t\t\t} catch ( error ) {\n\t\t\t\treturn Promise.reject( error );\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t});\n\t}\n\n\t/**\n\t * Delete several entities from the local storage.\n\t *\n\t * @summary This reimplements {@link Adapters.DiasporaAdapter#deleteMany}, modified for local storage or session storage interactions.\n\t * @author gerkin\n\t * @param   {string}                               table        - Name of the table to delete data from.\n\t * @param   {QueryLanguage#SelectQueryOrCondition} queryFind    - Hash representing entities to find.\n\t * @param   {QueryLanguage#QueryOptions}           [options={}] - Hash of options.\n\t * @returns {Promise} Promise resolved once items are deleted. Called with (*undefined*).\n\t */\n\tdeleteMany( table, queryFind, options = {}) {\n\t\ttry {\n\t\t\treturn this.findMany( table, queryFind, options ).then( entitiesToDelete => {\n\t\t\t\tconst tableIndex = this.ensureCollectionExists( table );\n\t\t\t\t_.pullAll( tableIndex, _.map( entitiesToDelete, 'id' ));\n\t\t\t\tthis.source.setItem( table, JSON.stringify( tableIndex ));\n\t\t\t\t_.forEach( entitiesToDelete, entityToDelete => {\n\t\t\t\t\tthis.source.removeItem( this.getItemName( table, entityToDelete.id ));\n\t\t\t\t});\n\t\t\t\treturn Promise.resolve();\n\t\t\t});\n\t\t} catch ( error ) {\n\t\t\treturn Promise.reject( error );\n\t\t}\n\t}\n}\n\nmodule.exports = WebStorageDiasporaAdapter;\n"]}